var searchIndex = JSON.parse('{\
"lightning":{"doc":"","t":[0,0,11,11,11,5,5,11,11,11,11,11,11,11,11,11,0,3,8,8,3,3,3,3,3,3,13,8,8,13,13,3,8,4,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,6,6,3,3,3,3,3,8,8,8,8,3,3,3,3,3,3,3,8,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,10,11,12,10,10,0,12,0,0,12,0,0,0,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,6,6,6,13,13,6,3,3,3,3,3,4,3,6,6,6,6,6,4,3,3,6,6,6,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,7,17,17,17,17,8,8,3,3,13,13,13,3,3,3,13,6,6,6,6,6,6,3,3,8,3,4,13,13,13,13,13,13,13,13,13,6,6,6,6,6,8,13,13,13,6,6,6,6,6,6,6,6,6,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,3,17,17,13,3,4,13,8,13,16,6,6,6,6,6,6,6,6,6,6,6,6,4,13,16,16,6,6,6,6,6,6,3,4,6,6,6,6,3,13,3,3,8,3,6,6,6,6,6,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,3,3,3,8,0,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,6,6,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,12,12,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,10,12,11,11,11,11,11,11,11,11,12,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,12,12,12,12,12,12,12,12,12,12,3,6,3,6,6,6,6,6,6,6,6,6,6,8,8,13,13,6,6,6,6,6,13,6,6,6,6,6,6,6,6,6,13,6,16,16,6,3,4,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,3,3,3,3,4,13,13,13,17,3,4,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,16,16,24,6,6,6,6,6,6,8,8,8,8,8,8,5,11,11,5,14,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,14,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,10,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,14,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,10,11,11,5,11,11,11,11,8,8,8,3,3,3,8,3,3,3,16,3,16,3,3,3,0,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["api","driver","from_dim","from_dim","from_dim","hostname","initialize_logger","into_dim","into_dim","into_dim","into_slices","into_slices","into_slices","to_point","to_point","to_point","types","Array","ArrayIndex","ArraySlice","ArrayView","Context","CudaKernel","CudaKernelBuilder","CudaLauncherBuilder","Event","Index","KernelArg","KernelArgs","NewAxis","Range","RegionIterator","Shape","SliceDescriptor","SliceRange","Slices","add_constant","affinity","affinity","annotate","array","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assign_from","assign_from","assign_to","assign_to","barrier","block_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collapse_axis","collapse_axis","column","compile","compile_kernel","compiler_options","constant","constants","context","context","copy","copy_from","copy_to","data_type","debugging","define","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distribution","domain","drop","drop","drop","drop","drop","drop","drop","drop","drop","element","element","empty","empty_f","empty_like","empty_with_layout","execute","extents","fill","fill","fill_ones","fill_zeros","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_dim","from_file","full","full_f","full_like","get","get","id","id","init","init","init","init","init","init","init","init","init","inner","insert_axis","into","into","into","into","into","into","into","into","into","into_dim","into_iter","into_range","into_slices","is_empty","launch","launch_distribution","launch_like","launch_one","layer","len","linker_options","name","ncols","new","new","next","nlayers","nrows","ones","ones_f","ones_like","option","options","param_array","param_value","permutate_axes","permutate_axes","push_array","push_value","query","regions","regions","remove_axis","restrict","restrict_axis","restrict_axis","row","scalar","set","set","shape","shift_axis_to_end","slice","slice_axis","slice_axis","swap_axes","swap_axes","synchronize","synchronize","system","then","to_owned","to_owned","to_owned","to_owned","to_point","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait","zeros","zeros_f","zeros_like","0","0","1","AllGPUs","AllNodes","BlockCyclic","BlockDist","CentralizeDist","ChunkDescriptor","ChunkQueryResult","ColumnBlockCyclic","ColumnBlockDist","DataDistribution","IntoDataDistribution","IntoWorkDistribution","MemoryDistribution","RandomDist","ReplicateDist","RowBlockCyclic","RowBlockDist","Stencil2DDist","StencilDist","TileDist","WorkDistribution","affinity","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_work_distribution","as_work_distribution","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","centralize","chunk_index","chunk_offset","clone","clone","clone","clone_into","clone_into","clone_into","clone_region","clone_region","columns","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","extents","fmt","fmt","fmt","fmt","from","from","from","from","generate","generate","generate","init","init","init","init","into","into","into","into","into_data_distribution","into_work_distribution","ne","owner","query_point","query_region","random","region_offset","replicate","rows","size","stencil","stencil2d","stencil3d","tile","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","visit_replicated","visit_unique","vzip","vzip","vzip","vzip","CentralizeDist","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","into_data_distribution","into_work_distribution","new","root","to_owned","try_from","try_into","type_id","type_name","unerase","vzip","ColumnBlockCyclic","ColumnBlockDist","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_data_distribution","into_data_distribution","into_work_distribution","into_work_distribution","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","vzip","vzip","with_alignment","with_memories","RandomDist","RandomDistribution","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_work_distribution","new","query_point","query_region","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","vzip","vzip","ReplicateDist","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","into_data_distribution","new","to_owned","try_from","try_into","type_id","type_name","unerase","vzip","with_memories","RowBlockCyclic","RowBlockDist","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_data_distribution","into_data_distribution","into_work_distribution","into_work_distribution","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","vzip","vzip","with_alignment","with_memories","StencilDist","StencilDistribution","as_any","as_any","as_any_mut","as_any_mut","as_work_distribution","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_region","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_data_distribution","into_work_distribution","new","query_point","query_region","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","visit_replicated","visit_unique","vzip","vzip","with_memories","Stencil2DDist","Stencil2DDistribution","as_any","as_any","as_any_mut","as_any_mut","as_work_distribution","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_data_distribution","into_work_distribution","new","query_point","query_region","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","visit_replicated","visit_unique","vzip","vzip","with_memories","Stencil3DDist","Stencil3DDistribution","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","halo","init","init","into","into","into_data_distribution","new","shift","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","unerase","unerase","visit_replicated","visit_unique","vzip","vzip","with_memories","TileDist","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","into_data_distribution","into_work_distribution","new","stride_by","to_owned","try_from","try_into","type_id","type_name","unerase","vzip","with_memories","PermutationDist","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","into_data_distribution","into_work_distribution","new","swap_xy","swap_xz","swap_yz","to_owned","try_from","try_into","type_id","type_name","unerase","vzip","DriverEvent","DriverHandle","Plan","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","attach_callback","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compile_kernel","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","is_ready","submit_stage","synchronize","system","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_name","type_name","type_name","unerase","unerase","unerase","vzip","vzip","vzip","0","Accessor","Affine","AffineN","AffineNM","And","Array","ByteStrides","ByteStridesN","CastError","ChunkId","ChunkLayout","ChunkLayoutBuilder","ComplexType","Config","CudaAccessor","CudaAccessor1","CudaAccessor2","CudaAccessor3","CudaAccessor4","CudaArg","CudaArgArray","CudaKernelId","CudaMutAccessor","CudaMutAccessor1","CudaMutAccessor2","CudaMutAccessor3","CudaMutAccessor4","DTYPE_BYTE","DTYPE_DOUBLE","DTYPE_DOUBLE2","DTYPE_F32","DTYPE_F64","DTYPE_FLOAT","DTYPE_FLOAT2","DTYPE_FLOAT3","DTYPE_FLOAT4","DTYPE_I16","DTYPE_I32","DTYPE_I64","DTYPE_I8","DTYPE_INT","DTYPE_LONG","DTYPE_SHORT","DTYPE_SIZE_T","DTYPE_U16","DTYPE_U32","DTYPE_U64","DTYPE_U8","Data","DataMut","DataType","DataValue","Device","Device","Device","DeviceCapabilities","DeviceId","DeviceInfo","DeviceMut","Dim","Dim1","Dim2","Dim3","Dim4","DimN","DriverConfig","EventId","Executor","ExecutorId","ExecutorKind","F32","F32x2","F32x3","F32x4","F64","F64x2","F64x3","F64x4","FileSystem","GenericAccessor","GenericAccessor1","GenericAccessor2","GenericAccessor3","GenericAccessor4","HasDataType","Host","Host","Host","HostAccessor","HostAccessor1","HostAccessor2","HostAccessor3","HostAccessor4","HostAccessorMut1","HostAccessorMut2","HostAccessorMut3","HostAccessorMut4","HostMut","HostMutAccessor","I16","I16x2","I16x3","I16x4","I32","I32x2","I32x3","I32x4","I64","I64x2","I64x3","I64x4","I8","I8x2","I8x3","I8x4","IndexValuePair","KeyValuePair","MAX_DEVICES","MAX_DIMS","Max","MemoryId","MemoryKind","Min","One","Or","Output","Permutation","Permutation1","Permutation2","Permutation3","Permutation4","PermutationN","Point","Point1","Point2","Point3","Point4","PointN","PrimitiveType","Product","Ptr","PtrMut","Rect","Rect1","Rect2","Rect3","Rect4","RectN","Reduction","ReductionFunction","RegularTransform","RegularTransformN","RegularTransformNM","Strides","StridesN","Sum","SyncId","SystemInfo","Tasklet","TaskletTypeId","Transform","TransformN","TransformNM","Translate","Translate1","Translate2","Translate3","Translate4","TranslateN","U16","U16x2","U16x3","U16x4","U32","U32x2","U32x3","U32x4","U64","U64x2","U64x3","U64x4","U8","U8x2","U8x3","U8x4","UnifiedPtr","Value","WorkerConfig","WorkerId","WorkerInfo","Zero","accessor","affinity","alignment","alignment","array","array_index","array_name","array_per_block","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_ptr","as_ptr_mut","as_raw_data","async_engine_count","axes_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","capabilities","cast","clock_rate","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","column_major","compute_capability","ctype","ctype","ctype","custom","data_type","data_type","data_type","data_type","data_type","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","device_mem_max","devices","domain","double","double2","double4","downcast_ref","driver","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execute","executor","executor_id","executor_id","float","float2","float4","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_complex","from_env","from_env","from_env","from_primitive","from_raw_data","from_type_id","function","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","host_mem_block","host_mem_max","hostname","id","id","id","id","identity","index_value_pair","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_raw_data","is_complex","is_primitive","key","key_value_pair","layout","layout","layout","long","memory_bus_width","memory_capacity","memory_capacity","memory_clock_rate","memory_id","memory_id","multiprocessor_count","name","name","name","name","ndims","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","node","node_id","null","of","of","offset_by_bytes","one","ordinal","owner","owner","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","per_block","prelude","row_major","scheduling_lookahead_size","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","short","size","size_in_bytes","size_in_bytes","specialization_policy","storage_capacity","storage_dir","strides","to_complex","to_contiguous","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_primitive","to_string","to_string","to_string","to_string","trace_file","transform","try_block","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","util","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_order","worker","zero","0","0","0","0","0","0","0","0","1","1","Accessor","ByteStrides","ByteStridesN","CudaAccessor","CudaAccessor1","CudaAccessor2","CudaAccessor3","CudaAccessor4","CudaMutAccessor","CudaMutAccessor1","CudaMutAccessor2","CudaMutAccessor3","CudaMutAccessor4","Data","DataMut","Device","DeviceMut","GenericAccessor","GenericAccessor1","GenericAccessor2","GenericAccessor3","GenericAccessor4","Host","HostAccessor","HostAccessor1","HostAccessor2","HostAccessor3","HostAccessor4","HostAccessorMut1","HostAccessorMut2","HostAccessorMut3","HostAccessorMut4","HostMut","HostMutAccessor","Ptr","PtrMut","Strides","StridesN","UnifiedPtr","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_device","as_device_mut","as_host","as_host_mut","as_ptr","as_ptr","as_ptr","as_ptr_mut","as_ptr_mut","as_ptr_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","eq","equivalent","equivalent","extents","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_buffer","from_buffer","from_buffer_raw","from_buffer_raw","init","init","init","init","into","into","into","into","ne","ne","new","offset_by_bytes","offset_by_bytes","offset_in_bytes","order","serialize","serialize","size_in_bytes","slice","split_at","strides","strides_in_bytes","swap_axes","to_byte_strides","to_const","to_dim","to_owned","to_owned","to_owned","to_owned","to_usize","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","vzip","vzip","vzip","vzip","0","0","0","0","1","1","0","Device","Device","DeviceCapabilities","DeviceId","DeviceInfo","ExecutorId","ExecutorKind","FileSystem","Host","Host","MAX_DEVICES","MemoryId","MemoryKind","SystemInfo","WorkerId","WorkerInfo","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","async_engine_count","best_affinity_executor","best_affinity_executor","best_affinity_memory","best_affinity_memory","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clock_rate","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","compute_capability","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","device","device_id","devices","devices","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","executor","executor_id","executor_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hostname","id","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","kind","kind","memory_bus_width","memory_capacity","memory_capacity","memory_clock_rate","memory_id","memory_id","multiprocessor_count","name","ne","ne","ne","ne","ne","ne","new","new","new","new","new","node","node_id","node_id","node_id","ordinal","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","worker","workers","0","0","Error","Error","Error","Error","HashMap","HashSet","IndexMap","IndexSet","Mutex","Result","StdError","TryFrom","TryInto","_","_","_","all","all_equal","all_equal","any","anyhow","as_any","as_any_mut","as_ref","as_ref","backtrace","backtrace","bail","batching","batching","borrow","borrow_mut","cartesian_product","cartesian_product","cause","cause","chain","chain","chunks","chunks","coalesce","coalesce","collect_tuple","collect_tuple","collect_vec","collect_vec","combinations","combinations","combinations_with_replacement","combinations_with_replacement","concat","concat","context","context","debug","dedup","dedup","dedup_by","dedup_by","default","deref","deref","deref_mut","deref_mut","description","description","downcast","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","downcast_ref","drop","drop","dropping","dropping","dropping_back","dropping_back","enumerate","error","exactly_one","exactly_one","find_position","find_position","fmt","fmt","fold1","fold1","fold_options","fold_options","fold_results","fold_results","fold_while","fold_while","foreach","foreach","forget","format","format","format_with","format_with","from","from","from","from_iter","group_by","group_by","info","init","interleave","interleave","interleave_shortest","interleave_shortest","intersperse","intersperse","into","into_group_map","into_group_map","is","is","is","is","join","join","kmerge","kmerge","kmerge_by","kmerge_by","map_into","map_into","map_results","map_results","max","merge","merge","merge_by","merge_by","merge_join_by","merge_join_by","min","minmax","minmax","minmax_by","minmax_by","minmax_by_key","minmax_by_key","msg","multi_cartesian_product","multi_cartesian_product","new","new_boxed_slice","next_tuple","next_tuple","pad_using","pad_using","partition_map","partition_map","peeking_take_while","peeking_take_while","permutations","permutations","position_max","position_max","position_max_by","position_max_by","position_max_by_key","position_max_by_key","position_min","position_min","position_min_by","position_min_by","position_min_by_key","position_min_by_key","position_minmax","position_minmax","position_minmax_by","position_minmax_by","position_minmax_by_key","position_minmax_by_key","positions","positions","product1","product1","replace","reversed","root_cause","set_from","set_from","sorted","sorted","sorted_by","sorted_by","sorted_by_key","sorted_by_key","source","source","step","step","sum1","sum1","swap","take","take_while_ref","take_while_ref","tee","tee","to_string","trace","tree_fold1","tree_fold1","try_collect","try_collect","try_from","try_from","try_into","try_into","tuple_combinations","tuple_combinations","tuple_windows","tuple_windows","tuples","tuples","type_id","type_name","unerase","unique","unique","unique_by","unique_by","update","update","vzip","warn","while_some","while_some","with_context","with_position","with_position","zip","zip_eq","zip_eq","zip_longest","zip_longest","AsAny","Counter","Downcast","DropGuard","Future","FutureError","GroupByExt","GroupByKey","GroupByKeyMut","InlineByteBuf","Item","OrderedQueue","Output","Promise","TCell","TCellOwner","array","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attach_callback","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complete","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","div_ceil","downcast_mut","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_and_increment","group_by_key","group_by_key_mut","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","is","is_empty","is_inline","is_ready","len","len","map","new","new","new","new","new","next","next","peek_min","pop_min","push","ready","round_up","serialize","sort_and_group_by_key","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","unerase","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait","wait_or_err","with_capacity","generate","map","try_map","try_zip","zip"],"q":["lightning","","","","","","","","","","","","","","","","","lightning::apilightning::api::SliceDescriptor","","","lightning::api::distribution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::centralize","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::columns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::random","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::replicate","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::rows","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::stencil","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::stencil2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::stencil3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::tile","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::api::distribution::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::driver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::typeslightning::types::CudaArg","","lightning::types::ExecutorKind","lightning::types::MemoryKind","lightning::types::UnifiedPtr","","","","","","lightning::types::accessorlightning::types::accessor::UnifiedPtr","","","","","","lightning::types::infolightning::types::info::ExecutorKind","lightning::types::info::MemoryKind","lightning::types::preludelightning::types::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning::types::util::array","","","",""],"d":["User-facing functions and types of lightning.","","","","","","","","","","","","","","","","Common types used throughout the lightning runtime system.","","","","","Lightning runtime context.","","Kernel definition.","","Run-time event.","","","Tuple of arguments which can be passed to [<code>Kernel#launch</code>].","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add options which will be passed to the host …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traits and utilities for dealing with data distributions.","","","","","","","","","","","","","Allocates a new array with uninitialized contents (i.e., …","Identical to [<code>empty</code>] but memory is laid out in …","Allocates a new array with the same shape and distribution …","Allocates a new array with uninitialized contents (i.e., …","","","","","","","","","","","","","","","","","","","","","","","","Allocates a new array initialized with the given value.","Identical to [<code>full</code>] but memory is laid out in column-major …","Allocates a new array initialized with the given value. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add options which will be passed to the linker (via …","","","","","","","","Allocates a new array initialized with ones.","Identical to [<code>ones</code>] but memory is laid out in column-major …","Allocates a new array with the same shape and distribution …","Add the given option which will be passed to the compiler …","Add multiple options which will all be passed to the …","","","","","","","Query whether the event has completed.","","","","","","","","","","","","","","","","","","","Synchronize all with workers. This method will block until …","","Calls the provided callback when the event completes (or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block until the events completes.","Allocates a new array initialized with zeros.","Identical to [<code>zeros</code>] but memory is laid out in …","Allocates a new zeroed array with the same shape and …","","","","","","","","Distribution that centralizes data at one memory.","","","Distributes columns among devices in block-cyclic fashion.","Distributes columns among devices in blocked fashion.","Interface that specifies how the data of an array should …","Types that can be converted into an <code>DataDistribution</code>.","","","","Distribution that replicates data across all devices.","Distributes rows among devices in block-cyclic fashion.","Distributes rows among devices in blocked fashion.","Distributes 1D array in block-cylic fashion while also …","Distributes 1D array in block-cylic fashion while also …","Distributes 2D array using tiles.","","","","","","","","","","","","","","","","","","","","","Internals for <code>CentralizeDist</code>.","","","","","","","","","","","Internals for <code>ColumnBlockCyclic</code> and <code>ColumnBlockDist</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internals for <code>ReplicateDist</code>.","Internals for <code>RowBlockCyclic</code> and <code>RowBlockDist</code>.","","Internals for <code>StencilDist</code>.","Internals for <code>StencilDist</code>.","Internals for <code>StencilDist</code>.","Internals for <code>TileDist</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Query how the data within the given region is distributed.","Query how the data within the given region is distributed.","","","","","Distribution that centralizes data at one memory.","","","","","","","","","","","","","","","","","","","","","","","","","Distributes columns among devices in block-cyclic fashion.","Distributes columns among devices in blocked fashion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distribution that replicates data across all devices.","","","","","","","","","","","","","","","","","","","","","","","","Distributes rows among devices in block-cyclic fashion.","Distributes rows among devices in blocked fashion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distributes 1D array in block-cylic fashion while also …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distributes 1D array in block-cylic fashion while also …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distributes 1D array in block-cylic fashion while also …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distributes 2D array using tiles.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error indicating failure to cast instance of <code>DataValue</code> to …","","","","","","","","","","","","","","","","","","","Alias for [<code>DataType::new(DataTypeKind::U8)</code>] (<code>char</code> in C).","Alias for [<code>DataType::new(DataTypeKind::F64)</code>] (<code>double</code> in C).","Alias for <code>double2</code> in CUDA.","Alias for [<code>DataType::new(DataTypeKind::F32)</code>].","Alias for [<code>DataType::new(DataTypeKind::F64)</code>].","Alias for [<code>DataType::new(DataTypeKind::F32)</code>] (<code>float</code> in C).","Alias for <code>float2</code> in CUDA.","Alias for <code>float3</code> in CUDA.","Alias for <code>float4</code> in CUDA.","Alias for [<code>DataType::new(DataTypeKind::I16)</code>].","Alias for [<code>DataType::new(DataTypeKind::I32)</code>].","Alias for [<code>DataType::new(DataTypeKind::I64)</code>].","Alias for [<code>DataType::new(DataTypeKind::I8)</code>].","Alias for [<code>DataType::new(DataTypeKind::I32)</code>] (<code>int</code> in C).","Alias for [<code>DataType::new(DataTypeKind::I64)</code>] (<code>long long</code> in …","Alias for [<code>DataType::new(DataTypeKind::I16)</code>] (<code>short</code> in C).","Alias for <code>size_t</code> in C.","Alias for [<code>DataType::new(DataTypeKind::U16)</code>].","Alias for [<code>DataType::new(DataTypeKind::U32)</code>].","Alias for [<code>DataType::new(DataTypeKind::U64)</code>].","Alias for [<code>DataType::new(DataTypeKind::U8)</code>].","","","","Type-erased value for a given <code>DataType</code>.","","","","","A devices number between 0 and <code>MAX_DEVICES</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types which correspond to <code>DataType</code> variants.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pair of index and value V. Ordering is by value.","Pair of some key K and value V. Ordering is by value.","Maximum number of possible devices.","The maximum number of dimensions allowed for an array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alignment of this data type in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type name used in C source code.","","Create custom data type with the given <code>alignment</code> and <code>size</code>. …","","","Returns <code>DataType</code> of value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>double</code> in C.","Alias for <code>double2</code> in C.","Alias for <code>double4</code> in C.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>float</code> in C.","Alias for <code>float2</code> in C.","Alias for <code>float4</code> in C.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>int</code> in C.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>long</code> in C.","","","","","","","","","User-facing name of type. Used in errors and debug …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>short</code> in C.","","","Size of this data type in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collection of utility functionsdevices number between 0 and <code>MAX_DEVICES</code>.","","","","","","","Maximum number of possible deviceshe <code>Error</code> type, a wrapper around a dynamic error type.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","","","","","","A mutual exclusion primitive useful for protecting shared …","","<code>Error</code> is a trait representing the basic expectations for …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Provides the <code>context</code> method for <code>Result</code>.","Conversion from an <code>Iterator</code>.","An <code>Iterator</code> blanket implementation that provides extra …","Test whether the predicate holds for all elements in the …","Check whether all elements compare equal.","Check whether all elements compare equal.","Test whether the predicate holds for any elements in the …","Construct an ad-hoc error from a string or existing non-…","","","","","Returns a stack backtrace, if available, of where this …","Returns a stack backtrace, if available, of where this …","","A “meta iterator adaptor”. Its closure receives a …","A “meta iterator adaptor”. Its closure receives a …","","","Return an iterator adaptor that iterates over the …","Return an iterator adaptor that iterates over the …","","","Returns an iterator starting with the current error and …","An iterator of the chain of source errors contained by …","Return an <em>iterable</em> that can chunk the iterator.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator adaptor that uses the passed-in closure …","Return an iterator adaptor that uses the passed-in closure …","Collects all items from the iterator into a tuple of a …","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Wrap the error value with additional context.","Wrap the error value with additional context.","Logs a message at the debug level.","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","","","","","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempt to downcast the error object to a concrete type.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some mutable reference to the boxed value if it is …","Downcast this error object by mutable reference.","Returns some reference to the boxed value if it is of type …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Downcast this error object by reference.","","","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Iterate <code>iterable</code> with a running index.","Logs a message at the error level.","If the iterator yields exactly one element, that element …","If the iterator yields exactly one element, that element …","Find the position and value of the first element …","Find the position and value of the first element …","","","Accumulator of the elements in the iterator.","Accumulator of the elements in the iterator.","Fold <code>Option</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Result</code> values from an iterator.","An iterator method that applies a function, producing a …","An iterator method that applies a function, producing a …","Run the closure <code>f</code> eagerly on each element of the iterator.","Run the closure <code>f</code> eagerly on each element of the iterator.","Takes ownership and “forgets” about the value <strong>without </strong>…","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","","","","Creates a value from an iterator.","Return an <em>iterable</em> that can group iterator elements. …","Return an <em>iterable</em> that can group iterator elements. …","Logs a message at the info level.","","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value between …","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the boxed type is the same as <code>T</code>","Returns true if <code>E</code> is the type held by this error object.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","Convert each item of the iterator using the <code>Into</code> trait.","Convert each item of the iterator using the <code>Into</code> trait.","Return an iterator adaptor that applies the provided …","Return an iterator adaptor that applies the provided …","Compares and returns the maximum of two values.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Create an iterator that merges items from both this and …","Create an iterator that merges items from both this and …","Compares and returns the minimum of two values.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Create a new error object from a printable error message.","Return an iterator adaptor that iterates over the …","Return an iterator adaptor that iterates over the …","Create a new error object from any error type.","","Advances the iterator and returns the next items grouped …","Advances the iterator and returns the next items grouped …","Return an iterator adaptor that pads the sequence to a …","Return an iterator adaptor that pads the sequence to a …","Collect all iterator elements into one of two partitions. …","Collect all iterator elements into one of two partitions. …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","Return an iterator adaptor that iterates over all …","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator adaptor that yields the indices of all …","Iterate over the entire iterator and multiply all the …","Iterate over the entire iterator and multiply all the …","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","Iterate <code>iterable</code> in reverse.","The lowest level cause of this error — this error’s …","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","The lower-level source of this error, if any.","The lower-level source of this error, if any.","Return an iterator adaptor that steps <code>n</code> elements in the …","Return an iterator adaptor that steps <code>n</code> elements in the …","Iterate over the entire iterator and add all the elements.","Iterate over the entire iterator and add all the elements.","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","Split into an iterator pair that both yield all elements …","","Logs a message at the trace level.","Accumulate the elements in the iterator in a tree-like …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","<code>.try_collect()</code> is more convenient way of writing …","Performs the conversion.","","Performs the conversion.","","Return an iterator adaptor that iterates over the …","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","Return an iterator that groups the items in tuples of a …","","","","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that applies a mutating function","","Logs a message at the warn level.","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Wrap the error value with additional context that is …","Return an iterator adaptor that wraps each element in a …","Return an iterator adaptor that wraps each element in a …","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","Value of <code>T</code> which will arrive at some later point in time.","Error indicating that a promise was dropped before it was …","","","","","","","","Object used to resolve a <code>Future&lt;T&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attach a callback which will be called with <code>Ok(T)</code> when the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Complete this promise with the given value. This will …","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide <code>x</code> by <code>y</code> and round up towards infinity. For example, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Group consecutive elements of a slice which map to the …","Group consecutive elements of a mutable slice which map to …","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the caller until the value of <code>T</code> is available.","","","Maps an <code>Future&lt;T&gt;</code> to <code>Future&lt;R&gt;</code> using the supplied function …","","","","Create a new future and promise. The promise should be …","","","","","","","","","","Sorts and then groups all elements which map to the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the caller until the value of <code>T</code> is available.","Blocks the caller until the value of <code>T</code> is available.","","","","","",""],"i":[0,0,1,2,3,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,10,0,0,10,10,0,0,0,0,11,12,13,14,12,15,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,13,14,13,14,14,12,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,13,15,14,10,13,15,14,10,13,14,13,12,15,12,19,19,13,14,13,13,13,14,12,12,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,0,13,16,12,17,13,18,15,14,10,19,13,14,15,15,15,15,0,13,13,14,13,13,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,20,12,15,15,15,13,14,14,19,16,12,17,13,18,15,14,10,19,15,13,16,12,17,13,18,15,14,10,19,20,18,21,11,13,19,19,19,19,13,13,12,19,13,12,17,18,13,13,15,15,15,12,12,12,12,13,14,17,17,16,13,14,13,13,13,14,13,15,13,14,13,14,13,13,14,13,14,13,15,15,16,13,15,14,10,22,13,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,16,12,17,13,18,15,14,10,19,16,15,15,15,23,24,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,26,25,27,28,26,25,27,28,29,29,26,25,27,28,26,25,27,28,0,26,26,26,27,28,26,27,28,29,29,0,27,28,26,25,27,28,26,25,27,28,26,25,27,28,26,26,26,26,25,27,28,26,25,27,28,30,27,28,26,25,27,28,26,25,27,28,31,32,26,25,33,33,0,26,0,0,25,0,0,0,0,26,27,28,0,26,25,27,28,26,25,27,28,26,25,27,28,26,25,27,28,26,25,27,28,29,29,26,25,27,28,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,36,35,0,0,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,38,38,37,38,37,38,37,38,37,38,37,38,37,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,41,40,0,0,42,43,42,43,43,42,43,42,43,42,43,42,43,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,43,43,42,43,42,43,42,43,42,43,42,43,42,43,43,43,42,43,42,0,0,44,45,44,45,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,44,44,45,45,44,45,44,45,44,45,44,45,44,45,44,45,45,45,44,45,44,0,0,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,46,46,46,47,46,47,46,47,46,47,46,47,46,47,47,47,46,47,46,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,50,51,52,50,51,52,51,50,51,52,50,51,52,51,52,51,52,52,50,51,52,50,51,52,50,51,52,51,52,50,51,52,50,51,52,50,51,52,51,52,52,52,51,52,50,51,52,50,51,52,50,51,52,50,51,52,50,51,52,50,51,52,53,0,0,0,0,54,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,57,58,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,58,0,0,0,0,0,0,56,57,58,0,0,0,0,0,0,0,0,0,56,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,54,0,0,54,0,54,60,0,0,0,0,0,0,0,0,0,0,0,0,0,54,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,55,0,0,0,0,0,63,64,63,55,65,64,55,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,61,62,77,80,67,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,67,81,77,80,66,67,63,70,71,72,73,74,55,65,64,59,75,76,77,54,79,66,67,63,70,71,72,73,74,55,65,64,59,75,76,77,54,79,66,71,73,64,75,67,80,64,59,75,64,82,76,77,79,63,76,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,63,71,72,73,74,55,65,64,59,75,77,54,79,69,83,65,0,0,0,84,68,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,63,71,72,73,74,64,59,75,76,77,54,79,66,63,71,72,73,74,64,59,75,76,77,54,79,60,85,83,81,0,0,0,66,67,63,68,69,70,71,71,72,73,74,74,55,65,64,64,59,75,76,77,78,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,54,79,64,68,69,70,64,77,71,79,73,66,71,72,73,74,64,59,75,54,79,66,71,72,73,74,64,59,75,54,79,69,69,83,84,60,60,81,79,64,0,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,0,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,77,64,64,76,64,64,59,75,0,80,83,80,80,83,81,80,64,59,75,80,65,66,63,71,72,73,74,64,75,76,77,79,67,68,71,79,85,83,73,71,64,61,86,80,66,73,66,71,73,64,75,76,65,0,67,69,66,63,71,72,73,74,55,65,64,59,75,77,54,79,0,63,63,64,69,69,69,63,64,63,66,67,63,70,71,72,73,74,55,65,64,59,75,76,77,54,79,64,71,74,64,78,70,65,0,66,67,63,68,69,70,71,72,73,74,55,65,64,59,59,75,76,76,76,77,78,54,79,59,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,0,55,76,66,67,63,68,69,70,71,72,73,74,55,65,64,59,75,76,77,78,54,79,67,68,87,88,89,90,91,92,93,94,95,94,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,56,0,61,62,0,0,0,96,97,56,98,96,97,56,98,98,98,98,98,61,56,98,62,56,98,96,97,56,98,96,97,56,98,96,97,56,98,96,97,56,98,98,96,96,97,97,56,98,96,96,97,97,56,98,96,97,96,97,56,98,96,97,96,97,98,96,97,56,98,96,96,97,97,56,98,98,98,98,98,96,97,56,98,96,97,56,98,96,97,98,61,56,97,96,96,97,98,98,98,98,98,98,96,56,98,96,97,56,98,97,98,96,97,56,98,96,97,56,98,96,97,56,98,96,97,56,98,96,97,56,98,96,97,56,98,92,93,94,95,94,95,53,57,58,0,0,0,0,0,58,57,58,0,0,0,0,0,0,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,80,58,100,57,85,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,101,58,101,83,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,53,99,57,85,58,100,85,83,81,53,53,99,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,100,53,99,53,99,57,85,58,100,53,99,57,85,58,100,83,81,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,85,100,80,83,80,80,83,81,80,80,53,99,57,85,58,100,53,99,85,100,101,85,85,100,83,80,53,99,57,85,58,100,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,53,99,57,85,58,100,101,83,81,80,101,101,90,91,0,102,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,0,0,105,105,105,105,106,106,0,104,104,105,105,104,104,106,106,106,105,104,104,104,104,104,104,104,104,104,104,104,104,104,104,107,105,0,104,104,104,104,0,105,105,105,105,106,106,106,106,106,105,106,106,106,105,106,106,106,105,105,105,104,104,104,104,0,0,104,104,104,104,105,105,104,104,104,104,104,104,104,104,104,104,0,104,104,104,104,105,105,105,108,104,104,0,105,104,104,104,104,104,104,105,104,104,106,106,106,105,104,104,104,104,104,104,104,104,104,104,0,104,104,104,104,104,104,0,104,104,104,104,104,104,105,104,104,105,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,0,105,104,104,104,104,104,104,104,104,106,106,104,104,104,104,0,0,104,104,104,104,105,0,104,104,104,104,103,105,102,105,104,104,104,104,104,104,105,105,105,104,104,104,104,104,104,105,0,104,104,107,104,104,0,104,104,104,104,0,0,0,0,0,0,0,0,0,0,109,0,110,0,0,0,0,111,112,113,114,115,116,117,118,119,120,121,111,112,113,114,115,116,117,118,119,120,121,115,115,115,115,118,112,113,114,115,116,116,117,118,119,120,121,112,113,114,115,116,116,117,118,119,120,121,115,121,115,121,119,121,112,112,113,114,115,115,116,117,118,119,120,121,112,112,113,114,115,115,116,117,118,119,120,121,115,0,122,122,112,112,113,114,115,115,116,117,118,118,119,119,120,121,115,118,119,120,120,121,112,113,114,115,115,115,115,116,117,118,119,120,121,110,109,109,112,113,114,115,116,117,118,119,120,121,112,113,114,115,116,117,118,119,120,121,112,113,114,122,121,115,118,115,121,118,112,116,117,119,121,113,114,121,121,121,118,0,115,109,115,121,120,112,113,114,115,116,117,118,119,120,121,112,113,114,115,116,117,118,119,120,121,112,113,114,115,116,117,118,119,120,121,111,112,113,114,115,116,117,118,119,120,121,112,113,114,115,116,117,118,119,120,121,112,113,114,115,116,117,118,119,120,121,118,118,121,0,0,0,0,0],"f":[null,null,[[["dim",6]]],[[["dim",6]]],[[["dim",6]]],[[],["str",15]],[[]],[[],["dim",6]],[[],["dim",6]],[[],["dim",6]],[[]],[[]],[[]],[[],["point",6]],[[],["point",6]],[[],["point",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",15]]],[[["arrayindex",8]],["option",4,[["memoryid",3]]]],[[["point",6]],["option",4,[["executorid",3]]]],[[["str",15]],["result",6]],[[],["result",6,[["array",3]]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["array",3]],["result",6,[["event",3]]]],[[["arrayview",3]],["result",6,[["event",3]]]],[[["array",3]],["result",6,[["event",3]]]],[[["arrayview",3]],["result",6,[["event",3]]]],[[],["result",6,[["event",3]]]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array",3]],[[],["context",3]],[[],["arrayview",3]],[[],["slicedescriptor",4]],[[]],[[]],[[]],[[]],[[["usize",15],["u64",15]],["array",3]],[[["usize",15],["u64",15]]],[[["u64",15]]],[[["context",3]],["result",6,[["cudakernel",3]]]],[[["cudakernelbuilder",3]],["result",6,[["cudakernel",3]]]],[[]],[[["str",15]],["i64",15]],[[],["hashmap",6]],[[],["context",3]],[[],["context",3]],[[],["result",6]],[[],["result",6,[["event",3]]]],[[],["result",6]],[[],["datatype",3]],[[["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[],["rect",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["arrayindex",8]],["array",3]],[[["point",6]],["arrayview",3]],[[],["result",6,[["array",3]]]],[[],["result",6,[["array",3]]]],[[["array",3]],["result",6,[["array",3]]]],[[["chunklayoutbuilder",3]],["result",6,[["array",3]]]],[[["config",3]],["result",6]],[[],["dim",6]],[[],["result",6,[["event",3]]]],[[["datavalue",3]],["result",6,[["event",3]]]],[[],["result",6,[["event",3]]]],[[],["result",6,[["event",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dim",6]]],[[],["result",6]],[[],["result",6,[["array",3]]]],[[],["result",6,[["array",3]]]],[[["array",3]],["result",6,[["array",3]]]],[[["arrayindex",8]],["result",6]],[[["point",6]],["result",6,[["datavalue",3]]]],[[],["arrayid",3]],[[],["cudakernelid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["driverhandle",3]],[[["usize",15]],["array",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dim",6]],[[]],[[],["slicedescriptor",4]],[[]],[[],["bool",15]],[[],["result",6,[["event",3]]]],[[],["result",6,[["event",3]]]],[[["array",3]],["result",6,[["event",3]]]],[[["executorid",3]],["result",6,[["event",3]]]],[[["u64",15]]],[[],["u64",15]],[[]],[[],["str",15]],[[],["u64",15]],[[]],[[["cudakernel",3],["dim3",6]]],[[],["option",4]],[[],["u64",15]],[[],["u64",15]],[[],["result",6,[["array",3]]]],[[],["result",6,[["array",3]]]],[[["array",3]],["result",6,[["array",3]]]],[[]],[[]],[[["datatype",3]]],[[["datatype",3]]],[[["permutation",6]]],[[["permutation",6]]],[[["arrayview",3]],["result",6]],[[["datavalue",3]],["result",6]],[[],["bool",15]],[[],["result",6,[["regioniterator",3]]]],[[],["result",6,[["vec",3]]]],[[["usize",15]],["array",3]],[[["arrayslice",8]],["array",3]],[[["usize",15]],["array",3]],[[["usize",15],["u64",15],["u64",15]]],[[["u64",15]]],[[],["result",6,[["array",3]]]],[[["arrayindex",8]],["result",6,[["event",3]]]],[[["point",6],["datavalue",3]],["result",6,[["event",3]]]],[[],["shape",8]],[[["usize",15]]],[[["arrayslice",8]],["array",3]],[[["usize",15]],["array",3]],[[["usize",15],["u64",15],["u64",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[],["result",6]],[[],["result",6]],[[],["systeminfo",3]],[[]],[[]],[[]],[[]],[[]],[[],["point",6]],[[],["result",6,[["vec",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6,[["array",3]]]],[[],["result",6,[["array",3]]]],[[["array",3]],["result",6,[["array",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["option",4,[["workdistribution",8]]]],[[],["option",4,[["workdistribution",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["chunkqueryresult",3]],[[],["allnodes",3]],[[],["allgpus",3]],[[]],[[]],[[]],[[["systeminfo",3],["rect",6]],["result",6]],[[["systeminfo",3],["rect",6]],["result",6]],null,[[],["allnodes",3]],[[],["allgpus",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["chunkqueryresult",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["systeminfo",3],["option",4,[["usize",15]]]],["result",6,[["vec",3,[["memoryid",3]]]]]],[[["systeminfo",3],["option",4,[["usize",15]]]],["result",6,[["vec",3,[["memoryid",3]]]]]],[[["systeminfo",3],["option",4,[["usize",15]]]],["result",6,[["vec",3,[["memoryid",3]]]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["chunkqueryresult",3]],["bool",15]],null,[[["point",6]],["executorid",3]],[[["rect",6]],["vec",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["rect",6],["fnmut",8]]],[[["rect",6],["option",4,[["memoryid",3]]],["fnmut",8]]],[[]],[[]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["centralizedist",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["memoryid",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["columnblockcyclic",3]],[[],["columnblockdist",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["u64",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[]],[[["point",6]],["executorid",3]],[[["rect",6]],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["replicatedist",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["rowblockcyclic",3]],[[],["rowblockdist",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["u64",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["option",4,[["workdistribution",8]]]],[[]],[[]],[[]],[[]],[[],["stencildist",3]],[[],["stencildistribution",3]],[[]],[[]],[[["systeminfo",3],["rect",6]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["u64",15],["u64",15]]],[[["point",6]],["executorid",3]],[[["rect",6]],["vec",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["rect",6],["fnmut",8]]],[[["rect",6],["option",4,[["memoryid",3]]],["fnmut",8]]],[[]],[[]],[[["u64",15],["u64",15]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["option",4,[["workdistribution",8]]]],[[]],[[]],[[]],[[]],[[],["stencil2ddist",3]],[[],["stencil2ddistribution",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["u64",15]]],[[["point",6]],["executorid",3]],[[["rect",6]],["vec",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["rect",6],["fnmut",8]]],[[["rect",6],["option",4,[["memoryid",3]]],["fnmut",8]]],[[]],[[]],[[["u64",15]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["stencil3ddist",3]],[[],["stencil3ddistribution",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["u64",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["rect",6],["fnmut",8]]],[[["rect",6],["option",4,[["memoryid",3]]],["fnmut",8]]],[[]],[[]],[[["u64",15]]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["tiledist",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[]],[[["dim",6]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["permutationdist",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["systeminfo",3],["dim",6]],["result",6]],[[["systeminfo",3],["dim",6]],["result",6,[["arc",3,[["workdistribution",8]]]]]],[[["permutation",6]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["event",3]],[[],["handle",3]],[[]],[[]],[[["cudamoduledef",3]],["result",6,[["cudakernelid",3]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[["fnonce",8]],["result",6,[["event",3]]]],[[],["result",6]],[[],["systeminfo",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],null,[[["usize",15],["usize",15],["rect",6],["affine",6]]],null,[[["usize",15]],["string",3]],[[["usize",15],["usize",15],["transform",6],["rect",6],["affine",6]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datatype",3],["dim",6],["memorykind",4]],["chunklayout",3]],null,[[["datatype",3]],["result",4,[["datavalue",3],["casterror",3]]]],null,[[],["chunkid",3]],[[],["chunklayoutbuilder",3]],[[],["chunklayout",3]],[[],["driverconfig",3]],[[],["tasklettypeid",3]],[[],["syncid",3]],[[],["eventid",3]],[[],["cudakernelid",3]],[[],["cudaarg",4]],[[],["cudaargarray",3]],[[],["datatype",3]],[[],["primitivetype",4]],[[],["complextype",4]],[[],["keyvaluepair",3]],[[],["datavalue",3]],[[],["reductionfunction",4]],[[],["reduction",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chunkid",3]],["ordering",4]],[[["tasklettypeid",3]],["ordering",4]],[[["eventid",3]],["ordering",4]],[[["datatype",3]],["ordering",4]],[[["complextype",4]],["ordering",4]],[[]],null,[[],["cow",4,[["str",15]]]],[[],["str",15]],[[],["string",3]],[[["str",15],["usize",15],["usize",15]],["result",4,[["datatype",3],["layouterror",3]]]],[[],["datatype",3]],[[],["datatype",3]],[[],["datatype",3]],[[],["datatype",3]],null,[[],["keyvaluepair",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["datatype",3]]]],[[],["result",4,[["primitivetype",4]]]],[[],["result",4,[["complextype",4]]]],[[],["result",4,[["datavalue",3]]]],[[],["result",4,[["reductionfunction",4]]]],[[],["result",4,[["reduction",3]]]],null,null,null,null,null,null,[[],["result",6]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["chunkid",3]],["bool",15]],[[["chunklayout",3]],["bool",15]],[[["tasklettypeid",3]],["bool",15]],[[["syncid",3]],["bool",15]],[[["eventid",3]],["bool",15]],[[["cudakernelid",3]],["bool",15]],[[["datatype",3]],["bool",15]],[[["primitivetype",4]],["bool",15]],[[["complextype",4]],["bool",15]],[[["keyvaluepair",3]],["bool",15]],[[["datavalue",3]],["bool",15]],[[["reductionfunction",4]],["bool",15]],[[["reduction",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["executor",8]],["result",6]],null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["f64",15]],["datavalue",3]],[[["f32",15]],["datavalue",3]],[[["i64",15]],["datavalue",3]],[[["u16",15]],["datavalue",3]],[[["i16",15]],["datavalue",3]],[[["f64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u32",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["i64",15]],["datavalue",3]],[[["i16",15]],["datavalue",3]],[[["u64",15]],["datavalue",3]],[[["keyvaluepair",3]],["datavalue",3]],[[],["datavalue",3]],[[["datavalue",3]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["i32",15]],["datavalue",3]],[[["i8",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["f32",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["i8",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u8",15]],["datavalue",3]],[[["i32",15]],["datavalue",3]],[[],["datavalue",3]],[[["keyvaluepair",3]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u16",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u8",15]],["datavalue",3]],[[],["datavalue",3]],[[["u32",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[]],[[],["datavalue",3]],[[],["datavalue",3]],[[]],[[]],[[]],[[["complextype",4]],["datatype",3]],[[]],[[]],[[]],[[["primitivetype",4]],["datatype",3]],[[["datatype",3]],["datavalue",3]],[[["typeid",3]]],[[],["reductionfunction",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["executorid",3]],[[],["tasklettypeid",3]],[[],["tasklettypeid",3]],null,[[],["datavalue",3]],[[["datatype",3]],["datatype",3]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3,[["global",3]]]],[[],["bool",15]],[[],["bool",15]],null,[[["datatype",3],["datatype",3]],["datatype",3]],[[],["layout",3]],[[],["layout",3]],[[],["layout",3]],null,null,null,null,null,null,null,null,[[],["cow",4,[["str",15]]]],[[],["str",15]],[[],["string",3]],null,null,[[["chunkid",3]],["bool",15]],[[["chunklayout",3]],["bool",15]],[[["tasklettypeid",3]],["bool",15]],[[["syncid",3]],["bool",15]],[[["eventid",3]],["bool",15]],[[["cudakernelid",3]],["bool",15]],[[["datatype",3]],["bool",15]],[[["complextype",4]],["bool",15]],[[["keyvaluepair",3]],["bool",15]],[[["datavalue",3]],["bool",15]],[[["reduction",3]],["bool",15]],[[["u8",15]]],[[["driverconfig",3],["workerconfig",3]]],[[["u64",15]]],[[["reductionfunction",4],["datatype",3]],["option",4,[["reduction",3]]]],null,null,[[["workerid",3]]],[[]],[[],["datatype",3]],[[["i64",15]]],[[]],null,[[],["workerid",3]],[[],["workerid",3]],[[["chunkid",3]],["option",4,[["ordering",4]]]],[[["tasklettypeid",3]],["option",4,[["ordering",4]]]],[[["eventid",3]],["option",4,[["ordering",4]]]],[[["datatype",3]],["option",4,[["ordering",4]]]],[[["complextype",4]],["option",4,[["ordering",4]]]],[[["keyvaluepair",3]],["option",4,[["ordering",4]]]],null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["option",4,[["usize",15]]]],[[],["usize",15]],null,null,null,null,[[],["option",4,[["complextype",4]]]],[[["dim",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["primitivetype",4]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["primitivetype",4],["tryfromprimitiveerror",3,[["primitivetype",4]]]]]],[[],["result",4]],[[],["result",4]],[[["datavalue",3]],["result",4,[["keyvaluepair",3],["casterror",3]]]],[[["datavalue",3]],["result",4,[["keyvaluepair",3],["casterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["primitivetype",4],["tryfromprimitiveerror",3,[["primitivetype",4]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],null,[[["datavalue",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[["deviceid",3]],["option",4,[["accessor",3,[["deviceptr",3]]]]]],[[["deviceid",3]],["option",4,[["accessor",3,[["deviceptr",3]]]]]],[[],["option",4,[["accessor",3]]]],[[],["option",4,[["accessor",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stridesn",3]],[[],["bytestridesn",3]],[[],["unifiedptr",4]],[[],["accessor",3]],[[]],[[]],[[]],[[]],[[],["datatype",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["stridesn",3]]]],[[],["result",4,[["bytestridesn",3]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["stridesn",3]],["bool",15]],[[["bytestridesn",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["dim",3,[["u64",15]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[],["stridesn",3]],[[]],[[]],[[],["bytestridesn",3]],[[]],[[]],[[["usize",15],["dim",3,[["u64",15]]]],["accessor",3]],[[["usize",15],["dim",3,[["u64",15]]]],["accessor",3]],[[["usize",15],["dim",3,[["u64",15]]],["datatype",3]],["accessor",3]],[[["usize",15],["dim",3,[["u64",15]]],["datatype",3]],["accessor",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["stridesn",3]],["bool",15]],[[["bytestridesn",3]],["bool",15]],[[["stridesn",3],["dim",3,[["u64",15]]],["datatype",3]],["accessor",3]],[[["i64",15]]],[[["i64",15]],["unifiedptr",4]],[[],["isize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[["rect",3,[["u64",15]]]],["accessor",3]],[[["usize",15],["u64",15]]],[[],["stridesn",3]],[[],["bytestridesn",3]],[[["usize",15],["usize",15]],["accessor",3]],[[["datatype",3]],["bytestridesn",3]],[[],["unifiedptr",4]],[[],["accessor",3]],[[]],[[]],[[]],[[]],[[]],[[["affine",3],["dim",3,[["u64",15]]]],["accessor",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[],["executorkind",4]],[[],["executorid",3]],[[],["memorykind",4]],[[],["memoryid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["workerid",3]],[[],["deviceid",3]],[[],["executorkind",4]],[[],["executorid",3]],[[],["memorykind",4]],[[],["memoryid",3]],[[],["systeminfo",3]],[[],["workerinfo",3]],[[],["deviceinfo",3]],[[],["devicecapabilities",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["workerid",3]],["ordering",4]],[[["deviceid",3]],["ordering",4]],[[["executorkind",4]],["ordering",4]],[[["executorid",3]],["ordering",4]],[[["memorykind",4]],["ordering",4]],[[["memoryid",3]],["ordering",4]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["workerid",3]]]],[[],["result",4,[["deviceid",3]]]],[[],["result",4,[["executorkind",4]]]],[[],["result",4,[["executorid",3]]]],[[],["result",4,[["memorykind",4]]]],[[],["result",4,[["memoryid",3]]]],[[],["result",4,[["systeminfo",3]]]],[[],["result",4,[["workerinfo",3]]]],[[],["result",4,[["deviceinfo",3]]]],[[],["result",4,[["devicecapabilities",3]]]],[[["deviceid",3]],["option",4,[["deviceinfo",3]]]],[[],["option",4,[["deviceid",3]]]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["workerid",3]],["bool",15]],[[["deviceid",3]],["bool",15]],[[["executorkind",4]],["bool",15]],[[["executorid",3]],["bool",15]],[[["memorykind",4]],["bool",15]],[[["memoryid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["systeminfo",3],["option",4,[["usize",15]]]],["result",6,[["vec",3,[["memoryid",3]]]]]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["executorkind",4]],[[],["memorykind",4]],null,null,null,null,null,null,null,null,[[["workerid",3]],["bool",15]],[[["deviceid",3]],["bool",15]],[[["executorkind",4]],["bool",15]],[[["executorid",3]],["bool",15]],[[["memorykind",4]],["bool",15]],[[["memoryid",3]],["bool",15]],[[["usize",15]],["workerid",3]],[[["usize",15]],["deviceid",3]],[[["workerid",3],["executorkind",4]],["executorid",3]],[[["workerid",3],["memorykind",4]],["memoryid",3]],[[["vec",3,[["workerinfo",3],["global",3]]]],["systeminfo",3]],null,[[],["workerid",3]],[[],["workerid",3]],null,null,[[["workerid",3]],["option",4,[["ordering",4]]]],[[["deviceid",3]],["option",4,[["ordering",4]]]],[[["executorkind",4]],["option",4,[["ordering",4]]]],[[["executorid",3]],["option",4,[["ordering",4]]]],[[["memorykind",4]],["option",4,[["ordering",4]]]],[[["memoryid",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["workerid",3]],["option",4,[["workerinfo",3]]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["any",8]],[[],["any",8]],[[],["error",8]],[[],["error",8]],[[],["option",4,[["backtrace",3]]]],[[],["option",4,[["backtrace",3]]]],null,[[],["batching",3]],[[],["batching",3]],[[]],[[]],[[],["product",3]],[[],["product",3]],[[],["option",4,[["error",8]]]],[[],["option",4,[["error",8]]]],[[],["chain",3]],[[],["chain",3]],[[["usize",15]],["intochunks",3]],[[["usize",15]],["intochunks",3]],[[],["coalesce",3]],[[],["coalesce",3]],[[],["option",4]],[[],["option",4]],[[],["vec",3,[["global",3]]]],[[],["vec",3,[["global",3]]]],[[["usize",15]],["combinations",3]],[[["usize",15]],["combinations",3]],[[["usize",15]],["combinationswithreplacement",3]],[[["usize",15]],["combinationswithreplacement",3]],[[]],[[]],[[],["result",4,[["error",3]]]],[[],["error",3]],null,[[],["dedupby",3,[["dedupeq",3]]]],[[],["dedupby",3,[["dedupeq",3]]]],[[],["dedupby",3]],[[],["dedupby",3]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[],["str",15]],[[],["str",15]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[],["result",4,[["error",3]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["enumerate",3]],null,[[],["result",4,[["exactlyoneerror",3]]]],[[],["result",4,[["exactlyoneerror",3]]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[]],[[]],[[]],[[["str",15]],["format",3]],[[["str",15]],["format",3]],[[["str",15]],["formatwith",3]],[[["str",15]],["formatwith",3]],[[]],[[],["error",3]],[[["never",15]]],[[]],[[],["groupby",3]],[[],["groupby",3]],null,[[],["usize",15]],[[],["interleave",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[],["intersperse",3]],[[]],[[],["hashmap",3,[["vec",3,[["global",3]]],["randomstate",3]]]],[[],["hashmap",3,[["vec",3,[["global",3]]],["randomstate",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["string",3]],[[["str",15]],["string",3]],[[],["kmergeby",3,[["kmergebylt",3]]]],[[],["kmergeby",3,[["kmergebylt",3]]]],[[],["kmergeby",3]],[[],["kmergeby",3]],[[],["mapinto",3]],[[],["mapinto",3]],[[],["mapresults",3]],[[],["mapresults",3]],[[]],[[],["mergeby",3,[["mergelte",3]]]],[[],["mergeby",3,[["mergelte",3]]]],[[],["mergeby",3]],[[],["mergeby",3]],[[],["mergejoinby",3]],[[],["mergejoinby",3]],[[]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["error",3]],[[],["multiproduct",3]],[[],["multiproduct",3]],[[],["error",3]],[[["usize",15]],["box",3,[["global",3]]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["padusing",3]],[[["usize",15]],["padusing",3]],[[]],[[]],[[],["peekingtakewhile",3]],[[],["peekingtakewhile",3]],[[["usize",15]],["permutations",3]],[[["usize",15]],["permutations",3]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["minmaxresult",4,[["usize",15]]]],[[],["positions",3]],[[],["positions",3]],[[],["option",4]],[[],["option",4]],[[]],[[],["rev",3]],[[],["error",8]],[[],["usize",15]],[[],["usize",15]],[[],["intoiter",3,[["global",3]]]],[[],["intoiter",3,[["global",3]]]],[[],["intoiter",3,[["global",3]]]],[[],["intoiter",3,[["global",3]]]],[[],["intoiter",3,[["global",3]]]],[[],["intoiter",3,[["global",3]]]],[[],["option",4,[["error",8]]]],[[],["option",4,[["error",8]]]],[[["usize",15]],["step",3]],[[["usize",15]],["step",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["takewhileref",3]],[[],["takewhileref",3]],[[]],[[]],[[],["string",3]],null,[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tuplecombinations",3]],[[],["tuplecombinations",3]],[[],["tuplewindows",3]],[[],["tuplewindows",3]],[[],["tuples",3]],[[],["tuples",3]],[[],["typeid",3]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[],["unique",3]],[[],["unique",3]],[[],["uniqueby",3]],[[],["uniqueby",3]],[[],["update",3]],[[],["update",3]],[[]],null,[[],["whilesome",3]],[[],["whilesome",3]],[[],["result",4,[["error",3]]]],[[],["withposition",3]],[[],["withposition",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["zipeq",3]],[[],["ziplongest",3]],[[],["ziplongest",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tcellowner",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tcellowner",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inlinebytebuf",3]],[[],["orderedqueue",3]],[[]],[[]],[[]],[[],["orderedqueue",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["inlinebytebuf",3]]]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[],["inlinebytebuf",3]],[[["box",3,[["global",3]]]],["inlinebytebuf",3]],[[["vec",3,[["u8",15],["global",3]]]],["inlinebytebuf",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["groupbykey",3]],[[],["groupbykeymut",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["future",3]],[[],["dropguard",3]],[[],["tcell",3]],[[],["tcellowner",3]],[[]],[[],["orderedqueue",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["future",3]],[[]],[[],["result",4]],[[],["groupbykeymut",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[["nonnull",3,[["erased",3]]]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["futureerror",3]]]],[[["usize",15]],["orderedqueue",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[6,"Dim1"],[6,"Dim2"],[6,"Dim3"],[6,"Rect1"],[6,"Rect2"],[6,"Rect3"],[6,"Point1"],[6,"Point2"],[6,"Point3"],[4,"SliceDescriptor"],[8,"ArraySlice"],[3,"CudaKernelBuilder"],[3,"Array"],[3,"ArrayView"],[3,"Context"],[3,"Event"],[3,"CudaLauncherBuilder"],[3,"RegionIterator"],[3,"CudaKernel"],[8,"Shape"],[8,"SliceRange"],[8,"ArrayIndex"],[13,"Range"],[13,"Index"],[3,"ChunkDescriptor"],[3,"ChunkQueryResult"],[3,"AllNodes"],[3,"AllGPUs"],[8,"DataDistribution"],[8,"MemoryDistribution"],[8,"IntoDataDistribution"],[8,"IntoWorkDistribution"],[8,"WorkDistribution"],[3,"CentralizeDist"],[3,"ColumnBlockCyclic"],[3,"ColumnBlockDist"],[3,"RandomDist"],[3,"RandomDistribution"],[3,"ReplicateDist"],[3,"RowBlockCyclic"],[3,"RowBlockDist"],[3,"StencilDist"],[3,"StencilDistribution"],[3,"Stencil2DDist"],[3,"Stencil2DDistribution"],[3,"Stencil3DDist"],[3,"Stencil3DDistribution"],[3,"TileDist"],[3,"PermutationDist"],[3,"Plan"],[3,"DriverEvent"],[3,"DriverHandle"],[3,"WorkerId"],[4,"ReductionFunction"],[4,"CudaArg"],[4,"UnifiedPtr"],[4,"ExecutorKind"],[4,"MemoryKind"],[4,"PrimitiveType"],[8,"Tasklet"],[8,"Data"],[8,"DataMut"],[3,"ChunkLayout"],[3,"DataType"],[3,"CudaArgArray"],[3,"ChunkId"],[3,"ChunkLayoutBuilder"],[3,"Config"],[3,"WorkerConfig"],[3,"DriverConfig"],[3,"TaskletTypeId"],[3,"SyncId"],[3,"EventId"],[3,"CudaKernelId"],[4,"ComplexType"],[3,"KeyValuePair"],[3,"DataValue"],[3,"CastError"],[3,"Reduction"],[3,"DeviceCapabilities"],[3,"DeviceInfo"],[8,"HasDataType"],[3,"WorkerInfo"],[8,"Executor"],[3,"ExecutorId"],[8,"One"],[8,"Zero"],[13,"Value"],[13,"Array"],[13,"Device"],[13,"Device"],[13,"Host"],[13,"HostMut"],[13,"Device"],[13,"DeviceMut"],[3,"StridesN"],[3,"ByteStridesN"],[3,"Accessor"],[3,"DeviceId"],[3,"MemoryId"],[3,"SystemInfo"],[8,"TryInto"],[8,"TryFrom"],[8,"_"],[3,"Error"],[8,"StdError"],[8,"_"],[8,"_"],[8,"GroupByExt"],[8,"Counter"],[8,"AsAny"],[3,"DropGuard"],[3,"GroupByKey"],[3,"GroupByKeyMut"],[3,"InlineByteBuf"],[3,"TCell"],[3,"TCellOwner"],[3,"Future"],[3,"Promise"],[3,"FutureError"],[3,"OrderedQueue"],[8,"Downcast"]]},\
"lightning_codegen":{"doc":"","t":[13,13,13,13,13,13,17,13,3,4,4,3,3,4,4,13,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["Aggressive","Array","Array","BlockX","BlockY","BlockZ","CPP_NAMESPACE","Free","Kernel","KernelArg","KernelArrayDimension","KernelConfig","KernelDef","KernelParam","KernelSpecializationPolicy","Mild","ModuleDef","None","Standard","Value","Value","VeryAggressive","array","array","array_dyn","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_checking","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compile","compiler","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","function_name","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","kernel","launch_async","make_valid_ident","name","ne","new","new","parameters","partial_cmp","serialize","serialize","serialize","serialize","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","type_name","type_name","type_name","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","dtype","ptr","strides_and_bounds","dims","dtype","dtype","is_constant","name","name"],"q":["lightning_codegenlightning_codegen::KernelArg","","","","lightning_codegen::KernelParam","","","","",""],"di":[1,2,3,4,4,4,0,4,0,0,0,0,0,0,0,1,0,1,1,2,3,1,2,3,2,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,7,2,1,6,7,3,4,8,2,1,6,7,3,4,8,1,5,6,1,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,6,7,3,4,2,1,5,6,7,3,4,8,1,8,1,8,6,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,7,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,6,5,0,3,8,5,6,7,1,6,7,3,4,6,2,1,6,7,3,4,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,2,1,5,6,7,3,4,8,2,3,2,1,5,6,7,3,4,8,9,10,10,10,11,11,12,11,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["datatype",3],["cudadeviceptr",3]]],[[["datatype",3],["usize",15],["bool",15]]],[[["usize",15],["datatype",3],["cudadeviceptr",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["kernelarg",4]],[[],["kernelspecializationpolicy",4]],[[],["moduledef",3]],[[],["kerneldef",3]],[[],["kernelparam",4]],[[],["kernelarraydimension",4]],[[],["kernelconfig",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["kernelspecializationpolicy",4]],["ordering",4]],[[["cudacontexthandle",3],["kernelconfig",3]],["result",6]],null,[[]],[[],["kernelconfig",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["kernelspecializationpolicy",4]],["bool",15]],[[["kernelconfig",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["cudacontexthandle",3],["cudastream",3],["dim3",6],["dim3",6],["dim3",6],["u32",15]],["result",6]],[[["str",15]],["cow",4,[["str",15]]]],[[],["str",15]],[[["kernelconfig",3]],["bool",15]],[[["moduledef",3],["kernelspecializationpolicy",4]]],[[["string",3],["vec",3,[["u8",15]]],["vec",3,[["kernelparam",4]]]]],null,[[["kernelspecializationpolicy",4]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["into",8,[["datavalue",3]]]]],[[["datatype",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null],"p":[[4,"KernelSpecializationPolicy"],[4,"KernelArg"],[4,"KernelParam"],[4,"KernelArrayDimension"],[3,"Kernel"],[3,"ModuleDef"],[3,"KernelDef"],[3,"KernelConfig"],[13,"Value"],[13,"Array"],[13,"Array"],[13,"Value"]]},\
"lightning_core":{"doc":"","t":[6,6,6,3,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,7,17,17,17,17,3,3,6,6,6,6,6,6,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,3,17,8,6,6,6,6,6,6,6,6,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,12,11,11,11,11,6,11,11,11,11,11,11,11,11,10,11,11,11,0,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,10,3,6,3,6,6,6,6,6,6,6,6,6,6,8,8,13,13,6,6,6,6,6,13,6,6,6,6,6,6,6,6,6,13,6,16,16,6,3,4,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,3,3,3,3,4,13,13,13,17,3,4,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,16,16,24,6,6,6,6,6,6,8,8,8,5,5,14,11,11,11,14,11,11,11,11,11,11,14,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,5,11,11,11,14,11,11,11,11,11,11,5,5,11,11,5,5,5,11,11,5,5,11,14,10,11,10,11,11,14,5,8,8,8,3,3,3,8,3,3,3,16,3,16,3,3,3,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,5,5,5,5],"n":["Affine","AffineN","AffineNM","CastError","ComplexType","DTYPE_BYTE","DTYPE_DOUBLE","DTYPE_DOUBLE2","DTYPE_F32","DTYPE_F64","DTYPE_FLOAT","DTYPE_FLOAT2","DTYPE_FLOAT3","DTYPE_FLOAT4","DTYPE_I16","DTYPE_I32","DTYPE_I64","DTYPE_I8","DTYPE_INT","DTYPE_LONG","DTYPE_SHORT","DTYPE_SIZE_T","DTYPE_U16","DTYPE_U32","DTYPE_U64","DTYPE_U8","DataType","DataValue","Dim","Dim1","Dim2","Dim3","Dim4","DimN","F32","F32x2","F32x3","F32x4","F64","F64x2","F64x3","F64x4","HasDataType","I16","I16x2","I16x3","I16x4","I32","I32x2","I32x3","I32x4","I64","I64x2","I64x3","I64x4","I8","I8x2","I8x3","I8x4","IndexValuePair","KeyValuePair","MAX_DIMS","One","Permutation","Permutation1","Permutation2","Permutation3","Permutation4","PermutationN","Point","Point1","Point2","Point3","Point4","PointN","PrimitiveType","Rect","Rect1","Rect2","Rect3","Rect4","RectN","RegularTransform","RegularTransformN","RegularTransformNM","Transform","TransformN","TransformNM","Translate","Translate1","Translate2","Translate3","Translate4","TranslateN","U16","U16x2","U16x3","U16x4","U32","U32x2","U32x3","U32x4","U64","U64x2","U64x3","U64x4","U8","U8x2","U8x3","U8x4","Zero","accessor","alignment","array_name","as_raw_data","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","ctype","ctype","ctype","custom","data_type","data_type","data_type","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","double","double2","double4","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","float","float2","float4","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_complex","from_primitive","from_raw_data","get_hash","get_hash","get_hash","hash","hash","hash","index_value_pair","info","init","init","init","init","init","init","int","into","into","into","into","into","into","into_raw_data","is_complex","is_primitive","key","key_value_pair","layout","layout","layout","long","name","name","name","ne","ne","ne","ne","of","one","partial_cmp","partial_cmp","partial_cmp","prelude","serialize","serialize","serialize","serialize","short","size_in_bytes","to_complex","to_owned","to_owned","to_owned","to_owned","to_owned","to_primitive","to_string","to_string","try_block","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","util","value","zero","Accessor","ByteStrides","ByteStridesN","CudaAccessor","CudaAccessor1","CudaAccessor2","CudaAccessor3","CudaAccessor4","CudaMutAccessor","CudaMutAccessor1","CudaMutAccessor2","CudaMutAccessor3","CudaMutAccessor4","Data","DataMut","Device","DeviceMut","GenericAccessor","GenericAccessor1","GenericAccessor2","GenericAccessor3","GenericAccessor4","Host","HostAccessor","HostAccessor1","HostAccessor2","HostAccessor3","HostAccessor4","HostAccessorMut1","HostAccessorMut2","HostAccessorMut3","HostAccessorMut4","HostMut","HostMutAccessor","Ptr","PtrMut","Strides","StridesN","UnifiedPtr","as_device","as_device_mut","as_host","as_host_mut","as_ptr","as_ptr","as_ptr","as_ptr_mut","as_ptr_mut","as_ptr_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eq","eq","equivalent","equivalent","extents","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_buffer","from_buffer","from_buffer_raw","from_buffer_raw","init","init","init","init","into","into","into","into","ne","ne","new","offset_by_bytes","offset_by_bytes","offset_in_bytes","order","serialize","serialize","size_in_bytes","slice","split_at","strides","strides_in_bytes","swap_axes","to_byte_strides","to_const","to_dim","to_owned","to_owned","to_owned","to_owned","to_usize","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","1","1","0","Device","Device","DeviceCapabilities","DeviceId","DeviceInfo","ExecutorId","ExecutorKind","FileSystem","Host","Host","MAX_DEVICES","MemoryId","MemoryKind","SystemInfo","WorkerId","WorkerInfo","async_engine_count","best_affinity_executor","best_affinity_executor","best_affinity_memory","best_affinity_memory","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clock_rate","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","compute_capability","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","device","device_id","devices","devices","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","executor","executor_id","executor_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hostname","id","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","kind","kind","memory_bus_width","memory_capacity","memory_capacity","memory_clock_rate","memory_id","memory_id","multiprocessor_count","name","ne","ne","ne","ne","ne","ne","new","new","new","new","new","node","node_id","node_id","node_id","ordinal","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","worker","workers","0","0","Error","Error","Error","Error","HashMap","HashSet","IndexMap","IndexSet","Mutex","Result","StdError","TryFrom","TryInto","all","any","anyhow","as_ref","as_ref","backtrace","bail","borrow","borrow_mut","cause","chain","chain","context","debug","default","deref","deref","deref_mut","deref_mut","description","downcast","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","downcast_ref","drop","drop","enumerate","error","fmt","fmt","forget","from","from","from","info","init","into","is","is","is","is","max","min","msg","new","new_boxed_slice","replace","reversed","root_cause","source","swap","take","to_string","trace","try_from","try_from","try_into","try_into","type_id","warn","zip","AsAny","Counter","Downcast","DropGuard","Future","FutureError","GroupByExt","GroupByKey","GroupByKeyMut","InlineByteBuf","Item","OrderedQueue","Output","Promise","TCell","TCellOwner","array","as_any","as_any_mut","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attach_callback","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complete","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","div_ceil","downcast_mut","downcast_mut","downcast_ref","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_and_increment","group_by_key","group_by_key_mut","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","is","is","is_empty","is_inline","is_ready","len","len","map","new","new","new","new","new","next","next","peek_min","pop_min","push","ready","round_up","serialize","sort_and_group_by_key","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","wait","wait_or_err","with_capacity","generate","map","try_map","try_zip","zip"],"q":["lightning_corelightning_core::accessor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_core::accessor::UnifiedPtr","","","","","","lightning_core::infolightning_core::info::ExecutorKind","lightning_core::info::MemoryKind","lightning_core::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_core::utillightning_core::util::array","","","",""],"d":["","","","Error indicating failure to cast instance of <code>DataValue</code> to …","","Alias for [<code>DataType::new(DataTypeKind::U8)</code>] (<code>char</code> in C).","Alias for [<code>DataType::new(DataTypeKind::F64)</code>] (<code>double</code> in C).","Alias for <code>double2</code> in CUDA.","Alias for [<code>DataType::new(DataTypeKind::F32)</code>].","Alias for [<code>DataType::new(DataTypeKind::F64)</code>].","Alias for [<code>DataType::new(DataTypeKind::F32)</code>] (<code>float</code> in C).","Alias for <code>float2</code> in CUDA.","Alias for <code>float3</code> in CUDA.","Alias for <code>float4</code> in CUDA.","Alias for [<code>DataType::new(DataTypeKind::I16)</code>].","Alias for [<code>DataType::new(DataTypeKind::I32)</code>].","Alias for [<code>DataType::new(DataTypeKind::I64)</code>].","Alias for [<code>DataType::new(DataTypeKind::I8)</code>].","Alias for [<code>DataType::new(DataTypeKind::I32)</code>] (<code>int</code> in C).","Alias for [<code>DataType::new(DataTypeKind::I64)</code>] (<code>long long</code> in …","Alias for [<code>DataType::new(DataTypeKind::I16)</code>] (<code>short</code> in C).","Alias for <code>size_t</code> in C.","Alias for [<code>DataType::new(DataTypeKind::U16)</code>].","Alias for [<code>DataType::new(DataTypeKind::U32)</code>].","Alias for [<code>DataType::new(DataTypeKind::U64)</code>].","Alias for [<code>DataType::new(DataTypeKind::U8)</code>].","","Type-erased value for a given <code>DataType</code>.","","","","","","","","","","","","","","","Types which correspond to <code>DataType</code> variants.","","","","","","","","","","","","","","","","","Pair of index and value V. Ordering is by value.","Pair of some key K and value V. Ordering is by value.","The maximum number of dimensions allowed for an array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alignment of this data type in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type name used in C source code.","","Create custom data type with the given <code>alignment</code> and <code>size</code>. …","","","Returns <code>DataType</code> of value.","","","","","","","","","","","","","","","","","","Alias for <code>double</code> in C.","Alias for <code>double2</code> in C.","Alias for <code>double4</code> in C.","","","","","","","","","","","","","","","","","Alias for <code>float</code> in C.","Alias for <code>float2</code> in C.","Alias for <code>float4</code> in C.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Alias for <code>int</code> in C.","","","","","","","","","","","","","","","Alias for <code>long</code> in C.","","User-facing name of type. Used in errors and debug …","","","","","","","","","","","","","","","","Alias for <code>short</code> in C.","Size of this data type in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collection of utility functions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A devices number between 0 and <code>MAX_DEVICES</code>.","","","","","","","Maximum number of possible deviceshe <code>Error</code> type, a wrapper around a dynamic error type.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","","","","","","A mutual exclusion primitive useful for protecting shared …","","<code>Error</code> is a trait representing the basic expectations for …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Test whether the predicate holds for all elements in the …","Test whether the predicate holds for any elements in the …","Construct an ad-hoc error from a string or existing non-…","","","Returns a stack backtrace, if available, of where this …","","","","","Returns an iterator starting with the current error and …","An iterator of the chain of source errors contained by …","Wrap the error value with additional context.","Logs a message at the debug level.","","","","","","","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempt to downcast the error object to a concrete type.","Returns some mutable reference to the boxed value if it is …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Downcast this error object by mutable reference.","Returns some reference to the boxed value if it is of type …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Downcast this error object by reference.","","","Iterate <code>iterable</code> with a running index.","Logs a message at the error level.","","","Takes ownership and “forgets” about the value <strong>without </strong>…","","","","Logs a message at the info level.","","","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the boxed type is the same as <code>T</code>","Returns true if <code>E</code> is the type held by this error object.","Compares and returns the maximum of two values.","Compares and returns the minimum of two values.","Create a new error object from a printable error message.","Create a new error object from any error type.","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","Iterate <code>iterable</code> in reverse.","The lowest level cause of this error — this error’s …","The lower-level source of this error, if any.","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","","Logs a message at the trace level.","Performs the conversion.","","Performs the conversion.","","","Logs a message at the warn level.","Iterate <code>i</code> and <code>j</code> in lock step.","","","","","Value of <code>T</code> which will arrive at some later point in time.","Error indicating that a promise was dropped before it was …","","","","","","","","Object used to resolve a <code>Future&lt;T&gt;</code>.","","","","","","","","","","Attach a callback which will be called with <code>Ok(T)</code> when the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Complete this promise with the given value. This will …","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide <code>x</code> by <code>y</code> and round up towards infinity. For example, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Group consecutive elements of a slice which map to the …","Group consecutive elements of a mutable slice which map to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the caller until the value of <code>T</code> is available.","","","Maps an <code>Future&lt;T&gt;</code> to <code>Future&lt;R&gt;</code> using the supplied function …","","","","Create a new future and promise. The promise should be …","","","","","","","","","","Sorts and then groups all elements which map to the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the caller until the value of <code>T</code> is available.","Blocks the caller until the value of <code>T</code> is available.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,3,2,1,4,5,3,6,2,1,4,5,3,6,3,2,1,4,5,3,2,1,4,5,3,2,4,2,1,4,2,7,5,3,5,2,1,4,5,3,6,2,1,4,5,3,6,2,1,4,3,0,0,0,2,1,4,5,3,6,2,1,4,5,3,2,1,4,5,3,0,0,0,2,2,1,4,5,3,6,6,2,1,4,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,2,2,3,2,1,4,2,1,4,2,0,2,1,4,5,3,6,0,2,1,4,5,3,6,3,2,2,5,2,2,1,4,0,2,1,4,2,4,5,3,2,8,2,4,5,0,2,1,4,3,0,2,2,2,1,4,5,3,2,2,6,0,2,1,1,4,5,5,5,3,6,1,2,1,4,5,3,6,2,1,4,5,3,6,0,5,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,10,0,11,12,0,0,0,13,13,13,13,11,10,13,12,10,13,14,15,10,13,14,15,10,13,14,15,10,13,14,15,10,13,13,14,14,15,15,10,13,14,14,15,15,10,13,14,15,14,15,10,13,14,15,14,15,13,14,15,10,13,14,14,15,15,10,13,13,13,13,13,14,15,10,13,14,15,10,13,14,15,13,11,10,15,14,14,15,13,13,13,13,13,13,14,10,13,14,15,10,13,15,13,14,15,10,13,14,15,10,13,14,15,10,13,16,17,18,19,18,19,20,21,22,0,0,0,0,0,22,21,22,0,0,0,0,0,0,23,22,24,21,25,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,29,23,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,23,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,27,22,27,28,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,20,26,21,25,22,24,25,28,29,20,20,26,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,20,26,20,26,21,25,22,24,20,26,21,25,22,24,28,29,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,25,24,23,28,23,23,28,29,23,23,20,26,21,25,22,24,20,26,25,24,27,25,25,24,28,23,20,26,21,25,22,24,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,20,26,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,20,26,21,25,22,24,27,28,29,23,27,27,30,31,0,32,33,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,35,0,34,34,35,35,34,34,0,0,34,34,34,34,35,35,35,35,34,35,35,35,34,35,35,35,34,34,34,0,0,34,34,0,34,34,34,0,34,34,35,35,35,34,0,0,34,34,0,0,0,34,35,0,0,34,0,33,34,32,34,34,0,0,0,0,0,0,0,0,0,0,0,0,36,0,37,0,0,0,0,38,38,39,39,39,39,40,41,42,43,39,44,44,45,40,46,47,48,41,42,43,39,44,44,45,40,46,47,48,39,48,39,48,46,48,41,41,42,43,39,39,44,45,40,46,47,48,41,41,42,43,39,39,44,45,40,46,47,48,39,0,49,49,49,49,41,41,42,43,39,39,44,45,40,40,46,46,47,48,39,40,46,47,47,48,41,42,43,39,39,39,39,44,45,40,46,47,48,37,36,36,41,42,43,39,44,45,40,46,47,48,41,42,43,39,44,45,40,46,47,48,41,42,43,49,49,48,39,40,39,48,40,41,44,45,46,48,42,43,48,48,48,40,0,39,36,39,48,47,41,42,43,39,44,45,40,46,47,48,41,42,43,39,44,45,40,46,47,48,41,42,43,39,44,45,40,46,47,48,38,40,40,48,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datatype",3]],["result",6,[["casterror",3]]]],[[],["datatype",3]],[[],["primitivetype",4]],[[],["complextype",4]],[[],["keyvaluepair",3]],[[],["datavalue",3]],[[]],[[]],[[]],[[]],[[]],[[["datatype",3]],["ordering",4]],[[["complextype",4]],["ordering",4]],[[],["cow",4,[["str",15]]]],[[],["str",15]],[[],["string",3]],[[["str",15],["usize",15],["usize",15]],["result",6,[["layouterror",3]]]],[[],["datatype",3]],[[],["datatype",3]],[[],["datatype",3]],[[],["keyvaluepair",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["datatype",3]],["bool",15]],[[["primitivetype",4]],["bool",15]],[[["complextype",4]],["bool",15]],[[["keyvaluepair",3]],["bool",15]],[[["datavalue",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u32",15]],["datavalue",3]],[[["u32",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["datavalue",3]]],[[["u16",15]],["datavalue",3]],[[["u16",15]],["datavalue",3]],[[],["datavalue",3]],[[["f64",15]],["datavalue",3]],[[["u8",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["u8",15]],["datavalue",3]],[[["i64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["f64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["keyvaluepair",3]],["datavalue",3]],[[],["datavalue",3]],[[["i64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["f32",15]],["datavalue",3]],[[["keyvaluepair",3]],["datavalue",3]],[[["i8",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["i8",15]],["datavalue",3]],[[["i16",15]],["datavalue",3]],[[["u64",15]],["datavalue",3]],[[["i16",15]],["datavalue",3]],[[["i32",15]],["datavalue",3]],[[["i32",15]],["datavalue",3]],[[["u64",15]],["datavalue",3]],[[],["datavalue",3]],[[],["datavalue",3]],[[["f32",15]],["datavalue",3]],[[]],[[["complextype",4]]],[[["primitivetype",4]]],[[["datatype",3]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],["bool",15]],[[],["bool",15]],null,[[["datatype",3],["datatype",3]]],[[],["layout",3]],[[],["layout",3]],[[],["layout",3]],null,[[],["cow",4,[["str",15]]]],[[],["str",15]],[[],["string",3]],[[["datatype",3]],["bool",15]],[[["complextype",4]],["bool",15]],[[["keyvaluepair",3]],["bool",15]],[[["datavalue",3]],["bool",15]],[[]],[[]],[[["datatype",3]],["option",4,[["ordering",4]]]],[[["complextype",4]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],null,[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["usize",15]],[[],["option",4,[["complextype",4]]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["primitivetype",4]]]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[["usize",15]],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[["datavalue",3]],["result",6,[["casterror",3]]]],[[["datavalue",3]],["result",6,[["casterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["deviceid",3]],["option",4,[["accessor",3,[["cudadeviceptr",3]]]]]],[[["deviceid",3]],["option",4,[["accessor",3,[["cudadeviceptr",3]]]]]],[[],["option",4,[["accessor",3]]]],[[],["option",4,[["accessor",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stridesn",3]],[[],["bytestridesn",3]],[[],["unifiedptr",4]],[[],["accessor",3]],[[]],[[]],[[]],[[]],[[],["datatype",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["stridesn",3]],["bool",15]],[[["bytestridesn",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["dimn",6,[["u64",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["dimn",6,[["u64",15]]]]],[[["usize",15],["dimn",6,[["u64",15]]]]],[[["usize",15],["dimn",6,[["u64",15]]],["datatype",3]]],[[["usize",15],["dimn",6,[["u64",15]]],["datatype",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["stridesn",3]],["bool",15]],[[["bytestridesn",3]],["bool",15]],[[["stridesn",3],["dimn",6,[["u64",15]]],["datatype",3]]],[[["i64",15]]],[[["i64",15]]],[[],["isize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[["rectn",6]]],[[["usize",15],["u64",15]]],[[],["stridesn",3]],[[],["bytestridesn",3]],[[["usize",15],["usize",15]]],[[["datatype",3]],["bytestridesn",3]],[[]],[[],["accessor",3]],[[]],[[]],[[]],[[]],[[]],[[["affinenm",6],["dimn",6,[["u64",15]]]],["accessor",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["executorkind",4]],[[],["executorid",3]],[[],["memorykind",4]],[[],["memoryid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["workerid",3]],[[],["deviceid",3]],[[],["executorkind",4]],[[],["executorid",3]],[[],["memorykind",4]],[[],["memoryid",3]],[[],["systeminfo",3]],[[],["workerinfo",3]],[[],["deviceinfo",3]],[[],["devicecapabilities",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["workerid",3]],["ordering",4]],[[["deviceid",3]],["ordering",4]],[[["executorkind",4]],["ordering",4]],[[["executorid",3]],["ordering",4]],[[["memorykind",4]],["ordering",4]],[[["memoryid",3]],["ordering",4]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["deviceid",3]],["option",4,[["deviceinfo",3]]]],[[],["option",4,[["deviceid",3]]]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["workerid",3]],["bool",15]],[[["deviceid",3]],["bool",15]],[[["executorkind",4]],["bool",15]],[[["executorid",3]],["bool",15]],[[["memorykind",4]],["bool",15]],[[["memoryid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["executorkind",4]],[[],["memorykind",4]],null,null,null,null,null,null,null,null,[[["workerid",3]],["bool",15]],[[["deviceid",3]],["bool",15]],[[["executorkind",4]],["bool",15]],[[["executorid",3]],["bool",15]],[[["memorykind",4]],["bool",15]],[[["memoryid",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["workerid",3],["executorkind",4]]],[[["workerid",3],["memorykind",4]]],[[["vec",3,[["workerinfo",3]]]]],null,[[],["workerid",3]],[[],["workerid",3]],null,null,[[["workerid",3]],["option",4,[["ordering",4]]]],[[["deviceid",3]],["option",4,[["ordering",4]]]],[[["executorkind",4]],["option",4,[["ordering",4]]]],[[["executorid",3]],["option",4,[["ordering",4]]]],[[["memorykind",4]],["option",4,[["ordering",4]]]],[[["memoryid",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["workerid",3]],["option",4,[["workerinfo",3]]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,[[],["error",8]],[[],["error",8]],[[],["option",4,[["backtrace",3]]]],null,[[]],[[]],[[],["option",4,[["error",8]]]],[[],["chain",3]],[[],["chain",3]],[[],["error",3]],null,[[],["default",8]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["str",15]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[["box",3,[["error",8],["global",3]]]],["result",4,[["box",3,[["global",3]]],["box",3,[["error",8],["global",3]]]]]],[[],["result",4,[["error",3]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]]],[[],["enumerate",3]],null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[["never",15]]],[[]],[[],["error",3]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["error",3]],[[],["error",3]],[[["usize",15]],["box",3]],[[]],[[],["rev",3]],[[],["error",8]],[[],["option",4,[["error",8]]]],[[]],[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["zip",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tcellowner",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tcellowner",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["orderedqueue",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["box",3]]],[[["vec",3,[["u8",15]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["groupbykey",3]],[[],["groupbykeymut",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["future",3]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["groupbykeymut",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[]],[[],["result",6,[["futureerror",3]]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]]],"p":[[4,"PrimitiveType"],[3,"DataType"],[3,"DataValue"],[4,"ComplexType"],[3,"KeyValuePair"],[3,"CastError"],[8,"HasDataType"],[8,"One"],[8,"Zero"],[4,"UnifiedPtr"],[8,"Data"],[8,"DataMut"],[3,"Accessor"],[3,"StridesN"],[3,"ByteStridesN"],[13,"Host"],[13,"HostMut"],[13,"Device"],[13,"DeviceMut"],[3,"WorkerId"],[4,"ExecutorKind"],[4,"MemoryKind"],[3,"DeviceCapabilities"],[3,"MemoryId"],[3,"ExecutorId"],[3,"DeviceId"],[3,"SystemInfo"],[3,"WorkerInfo"],[3,"DeviceInfo"],[13,"Device"],[13,"Device"],[8,"TryInto"],[8,"TryFrom"],[3,"Error"],[8,"StdError"],[8,"GroupByExt"],[8,"Counter"],[8,"AsAny"],[3,"InlineByteBuf"],[3,"Future"],[3,"DropGuard"],[3,"GroupByKey"],[3,"GroupByKeyMut"],[3,"TCell"],[3,"TCellOwner"],[3,"Promise"],[3,"FutureError"],[3,"OrderedQueue"],[8,"Downcast"]]},\
"lightning_cuda":{"doc":"This crate offers transparent rustic wrappers around the …","t":[0,0,0,0,0,5,0,0,0,0,0,5,18,3,3,3,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,16,16,10,10,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,3,3,3,3,16,3,8,8,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,3,3,4,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["context","copy","device","error","event","init","mem","module","prelude","profiler","stream","version","BLOCING_SYNC","ContextFlags","ContextGuard","ContextHandle","LMEM_RESIZE_TO_MAX","MAP_HOST","SCHED_AUTO","SCHED_SPIN","SCHED_YIELD","activate","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_access_peer","clone","clone","clone_into","clone_into","cmp","cmp","complement","contains","create_context","current","destroy_context","device","difference","disable_peer_access","drop","empty","enable_peer_access","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","memory_free_and_total","ne","ne","not","partial_cmp","partial_cmp","pop","push","raw","release_device_context","remove","retain_device_context","set","sub","sub_assign","symmetric_difference","synchronize","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","try_with","type_id","type_id","type_id","union","with","CopyDestination","CopySource","Item","Item","as_destination","as_source","copy","copy_async","copy_raw","copy_raw_async","ASYNC_ENGINE_COUNT","CAN_FLUSH_REMOTE_WRITES","CAN_MAP_HOST_MEMORY","CAN_TEX2D_GATHER","CAN_USE_64_BIT_STREAM_MEM_OPS","CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM","CAN_USE_STREAM_MEM_OPS","CAN_USE_STREAM_WAIT_VALUE_NOR","CLOCK_RATE","COMPUTE_CAPABILITY_MAJOR","COMPUTE_CAPABILITY_MINOR","COMPUTE_MODE","COMPUTE_PREEMPTION_SUPPORTED","CONCURRENT_KERNELS","CONCURRENT_MANAGED_ACCESS","COOPERATIVE_LAUNCH","COOPERATIVE_MULTI_DEVICE_LAUNCH","DIRECT_MANAGED_MEM_ACCESS_FROM_HOST","Device","DeviceAttribute","ECC_ENABLED","GLOBAL_L1_CACHE_SUPPORTED","GLOBAL_MEMORY_BUS_WIDTH","GPU_OVERLAP","HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED","HANDLE_TYPE_WIN32_HANDLE_SUPPORTED","HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED","HOST_NATIVE_ATOMIC_SUPPORTED","HOST_REGISTER_SUPPORTED","INTEGRATED","KERNEL_EXEC_TIMEOUT","L2_CACHE_SIZE","LOCAL_L1_CACHE_SUPPORTED","MANAGED_MEMORY","MAXIMUM_SURFACE1D_LAYERED_LAYERS","MAXIMUM_SURFACE1D_LAYERED_WIDTH","MAXIMUM_SURFACE1D_WIDTH","MAXIMUM_SURFACE2D_HEIGHT","MAXIMUM_SURFACE2D_LAYERED_HEIGHT","MAXIMUM_SURFACE2D_LAYERED_LAYERS","MAXIMUM_SURFACE2D_LAYERED_WIDTH","MAXIMUM_SURFACE2D_WIDTH","MAXIMUM_SURFACE3D_DEPTH","MAXIMUM_SURFACE3D_HEIGHT","MAXIMUM_SURFACE3D_WIDTH","MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS","MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH","MAXIMUM_SURFACECUBEMAP_WIDTH","MAXIMUM_TEXTURE1D_LAYERED_LAYERS","MAXIMUM_TEXTURE1D_LAYERED_WIDTH","MAXIMUM_TEXTURE1D_LINEAR_WIDTH","MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH","MAXIMUM_TEXTURE1D_WIDTH","MAXIMUM_TEXTURE2D_GATHER_HEIGHT","MAXIMUM_TEXTURE2D_GATHER_WIDTH","MAXIMUM_TEXTURE2D_HEIGHT","MAXIMUM_TEXTURE2D_LAYERED_HEIGHT","MAXIMUM_TEXTURE2D_LAYERED_LAYERS","MAXIMUM_TEXTURE2D_LAYERED_WIDTH","MAXIMUM_TEXTURE2D_LINEAR_HEIGHT","MAXIMUM_TEXTURE2D_LINEAR_PITCH","MAXIMUM_TEXTURE2D_LINEAR_WIDTH","MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT","MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH","MAXIMUM_TEXTURE2D_WIDTH","MAXIMUM_TEXTURE3D_DEPTH","MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE","MAXIMUM_TEXTURE3D_HEIGHT","MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE","MAXIMUM_TEXTURE3D_WIDTH","MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE","MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS","MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH","MAXIMUM_TEXTURECUBEMAP_WIDTH","MAX_BLOCK_DIM_X","MAX_BLOCK_DIM_Y","MAX_BLOCK_DIM_Z","MAX_GRID_DIM_X","MAX_GRID_DIM_Y","MAX_GRID_DIM_Z","MAX_PITCH","MAX_REGISTERS_PER_BLOCK","MAX_REGISTERS_PER_MULTIPROCESSOR","MAX_SHARED_MEMORY_PER_BLOCK","MAX_SHARED_MEMORY_PER_BLOCK_OPTIN","MAX_SHARED_MEMORY_PER_MULTIPROCESSOR","MAX_THREADS_PER_MULTIPROCESSOR","MEMORY_CLOCK_RATE","MULTIPROCESSOR_COUNT","MULTI_GPU_BOARD","MULTI_GPU_BOARD_GROUP_ID","PAGEABLE_MEMORY_ACCESS","PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES","PCI_BUS_ID","PCI_DEVICE_ID","PCI_DOMAIN_ID","SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO","STREAM_PRIORITIES_SUPPORTED","SURFACE_ALIGNMENT","TCC_DRIVER","TEXTURE_ALIGNMENT","TEXTURE_PITCH_ALIGNMENT","TOTAL_CONSTANT_MEMORY","UNIFIED_ADDRESSING","VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED","WARP_SIZE","all","attribute","borrow","borrow","borrow_mut","borrow_mut","can_access_peer","clone","clone","clone_into","clone_into","cmp","cmp","compute_capability","count","current","eq","eq","fmt","fmt","from","from","from_raw","hash","into","into","max_block_dim","max_grid_dim","multiprocessor_count","name","ne","nth","ordinal","partial_cmp","partial_cmp","raw","to_owned","to_owned","total_memory","try_from","try_from","try_into","try_into","type_id","type_id","Error","Result","borrow","borrow_mut","clone","clone_into","cmp","cuda_call","cuda_check","default","description","deserialize","eq","fmt","fmt","from","from_raw","hash","into","name","ne","new","partial_cmp","raw","serialize","to_owned","to_string","try_from","try_into","type_id","BLOCKING_SYNC","DISABLE_TIMING","Event","EventFlags","INTERPROCESS","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","complement","contains","difference","drop","elapsed","elapsed_ms","elapsed_since","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw","hash","insert","intersection","intersects","into","into","into_raw","is_all","is_empty","ne","ne","new","not","partial_cmp","partial_cmp","query","raw","record","remove","set","sub","sub_assign","symmetric_difference","synchronize","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","with_flags","with_timing","Contiguous","ContiguousMut","DeviceMem","DevicePtr","DeviceSlice","DeviceSliceMut","Item","PinnedMem","Scalar","SliceRange","add","add_bytes","as_destination","as_destination","as_destination","as_host","as_host_mut","as_mut","as_ptr","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_source","as_source","as_source","as_source","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone_into","cmp","copy_from","copy_from_slice","copy_to","copy_to_vec","deref","deref_mut","drop","drop","empty","empty","eq","fill","filled","filled","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_raw","from_raw","from_raw","from_raw","from_slice","from_slice","hash","into","into","into","into","into","into_raw","is_empty","len","memset","ne","new","offset","offset_bytes","offset_from","partial_cmp","raw","size_in_bytes","slice","slice_mut","split_at","split_at_mut","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_slice","try_slice_mut","type_id","type_id","type_id","type_id","type_id","uninitialized","uninitialized","zero","zeroed","zeroed","0","1","2","BINARY_VERSION","CACHE_MODE_CA","CONST_SIZE_BYTES","Dim3","Function","FunctionAttribute","LOCAL_SIZE_BYTES","MAX_DYNAMIC_SHARED_SIZE_BYTES","MAX_THREADS_PER_BLOCK","Module","NUM_REGS","PREFERRED_SHARED_MEMORY_CARVEOUT","PTX_VERSION","SHARED_SIZE_BYTES","attribute","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","drop","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_raw","function","hash","hash","into","into","into","into","into_raw","launch_async","load_fatbinary","load_file","load_image","ne","new","partial_cmp","partial_cmp","raw","raw","set_attribute","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","y","z","profiler_start","profiler_stop","DEFAULT","NON_BLOCKING","Stream","StreamFlags","add_callback","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","complement","contains","default","difference","drop","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw","hash","insert","intersection","intersects","into","into","into_raw","is_all","is_default","is_empty","ne","ne","new","not","partial_cmp","partial_cmp","priority","priority_range","query","raw","remove","set","sub","sub_assign","symmetric_difference","synchronize","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","wait_for_event","with_options"],"q":["lightning_cuda","","","","","","","","","","","","lightning_cuda::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::copy","","","","","","","","","","lightning_cuda::device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lightning_cuda::profiler","","lightning_cuda::stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Management of CUDA contexts","Copying between device/host buffers..","CUDA device management.","Error handling","Management of CUDA events.","Initialize the CUDA runtime.","Memory allocation in CUDA.","Loading CUDA modules and calling kernels.","Exports commonly used items.","Management of CUDA profiler.","Management of CUDA streams.","Returns the version of the CUDA driver API.","","Flags for configuring a CUDA context.","RAII guard returned by <code>ContextHandle#activate</code>.","Handle to a CUDA context.","","","","","","Make this context the active context. A RAII guard is …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Create a new CUDA context for the given device.","Returns the top CUDA context in the thread-local stack of …","Destroys the CUDA context associated with the given handle.","The device associated with this context.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Disable peer access","","Returns an empty set of flags.","Enable peer access","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Construct a <code>ContextHandle</code> for the given <code>CUcontext</code>. Returns …","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","Pops the current context of the thread-local stack and …","Push this context on top of the thread-local stack of …","Returns the underlying <code>CUcontext</code> of this handle.","Release the primary CUDA context for the given device.","Removes the specified flags in-place.","Access the primary CUDA context for the given device.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Blocks until all requested work on this context have …","","","Toggles the specified flags in-place.","","","","","","","Similar to <code>with</code>, but allows fallible operations.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Call the the given closure while this context is active. …","Memory region suitable to be used as copy destination in …","Memory region suitable to be used as copy source in <code>copy</code> …","","","Should return a <code>(ptr, len)</code> pair indicating the memory …","Should return a <code>(ptr, len)</code> pair indicating the memory …","Copies <code>n</code> elements of type <code>T</code> from <code>src</code> to <code>dst</code>.","Copies <code>n</code> elements of type <code>T</code> from <code>src</code> to <code>dst</code> asynchronously.","Copies raw bytes .","Copies raw bytes asynchronously.","","","","","","","","","","","","","","","","","","","CUDA-capable device.","Attribute which can be queried using <code>Device::attribute</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns all CUDA-capable devices in the system.","Returns the value of the given device attribute.","","","","","Check if this device can access a peer device.","","","","","","","Returns the compute capability of this device. This is …","Returns the number of CUDA-capable devices in the system.","Returns the <code>Device</code> for the CUDA context currently …","","","","","","","Construct a <code>Device</code> from the given <code>CUdevice</code>.","","","","Returns the maximum block size that can be launched on …","Returns the maximum grid size that can be launched on this …","Returns the number of streaming multiprocessors (SMs) of …","Returns the name of this <code>Device</code>.","","Returns <code>Device</code> for the given <code>ordinal</code>.","Returns the ordinal of this device.","","","Returns the <code>CUdevice</code> that is wrapped by this <code>Device</code>.","","","Returns the total memory capacity of this device in bytes.","","","","","","","Error returned by the CUDA driver API.","Alias for <code>std::result::Result&lt;T, cuba::Error&gt;</code>.","","","","","","Returns the output value of a CUDA driver API function.","Check the result of a CUDA driver API function.","","Get the description of this error. Returns an error if …","","","","","","Construct an error object from a raw <code>CUresult</code>. Prefer to …","","","Get the name of this error. Returns an error if this error …","","Construct an error object. Returns <code>Ok(())</code> for <code>CUDA_SUCCESS</code> …","","Returns the underlying <code>CUresult</code>.","","","","","","","","","CUDA Event.","Flags for configuring CUDA events.","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Compute the time elapsed between two events.","Compute the time elapsed between two events in …","Alias for <code>Event::elapsed(start, self)</code>.","Returns an empty set of flags.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Construct from a <code>CUevent</code> object.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns the underlying <code>CUevent</code> object and consume this …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Create a new event with timing disabled.","Returns the complement of this set of flags.","","","Returns <code>true</code> if all the event has fired and <code>false</code> …","Returns the underlying <code>CUevent</code> object.","Record this event on the given stream.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Block until this event fires.","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Create a new event with custom flags.","Create a new event with timing enabled.","","","Memory buffer allocated on a CUDA device.","Raw memory pointer which can be accessed on a CUDA device.","Fixed-size slice of memory accessible to a CUDA device.","Fixed-size mutable slice of memory accessible to a CUDA …","","Memory buffer allocated on host as paged-locked memory.","Represents a type which can be safely copied …","Valid slice range to be used in <code>slice</code>, <code>slice_mut</code>, <code>try_slice</code>…","","","","","","Returns a host-side memory slice.","Returns a mutable host-side memory slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copy data from another buffer into this buffer. Alias for …","Copy data from a slice into this buffer. Alias for …","Copy data from this buffer into another buffer. Alias for […","Copy data from this buffer into a newly allocated <code>Vec</code>.","","","","","Allocate buffer of length <code>len</code> without initializing the …","Allocate buffer of length <code>len</code> without initializing the …","","Set all elements in this buffer to <code>value</code>. This is safe …","Allocate buffer of length <code>len</code> and set all elements to <code>value</code>…","Allocate buffer of length <code>len</code> and set all elements to <code>value</code>…","","","","","","","","","","","Create a <code>DeviceMem&lt;T&gt;</code> from a <code>DevicePtr&lt;T&gt;</code> and length.","","","","This is safe since raw copying elements is valid for <code>Scalar</code>…","This is safe since raw copying elements is valid for <code>Scalar</code>…","","","","","","","Returns the underlying <code>DevicePtr&lt;T&gt;</code> and length of this …","","","Set all bytes in this memory region to the given byte …","","","","","","","","","","Returns a","","","","","","","","","","","","","","","Similar to <code>slice_mut</code>, expect it returns <code>None</code> if the range …","","","","","","Allocate buffer of length <code>len</code> without initializing the …","Allocate buffer of length <code>len</code> without initializing the …","Set all elements of this buffer to zero. This is safe …","Allocate buffer of length <code>len</code> and set all elements to zero.","Allocate buffer of length <code>len</code> and set all elements to zero.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CUDA Compute stream.","Flags for configuring a CUDA stream.","Add a callback onto this stream. The callback will be …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the CUDA default stream.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Construct from a <code>CUstream</code> object.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns the underlying <code>CUstream</code> object and consume this …","Returns <code>true</code> if all flags are currently set.","Returns true if this stream represents the CUDA default …","Returns <code>true</code> if no flags are currently stored.","","","Construct a new stream.","Returns the complement of this set of flags.","","","Returns the priority of this stream.","Returns the numerical range for stream priorities as a …","Returns <code>true</code> if all previously enqueued work onto the …","Returns the underlying <code>CUstream</code> object.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Block until all previously enqueued work onto this stream …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Makes all future work for this stream wait until the given …","Construct a new stream with the given priority and flags. …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,3,1,2,3,1,2,2,1,2,1,2,1,1,1,0,2,0,2,1,2,3,1,2,2,1,1,2,3,1,1,1,1,1,2,3,1,1,1,1,1,2,1,1,1,1,2,3,1,1,1,2,2,1,1,2,1,2,2,2,0,1,0,1,1,1,1,2,2,1,1,2,3,1,2,3,1,2,2,3,1,1,2,0,0,4,5,5,4,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,6,7,6,7,7,6,7,6,7,6,7,7,7,7,6,7,6,7,6,7,6,7,6,7,7,7,7,7,7,7,7,6,7,7,6,7,7,6,7,6,7,6,0,0,8,8,8,8,8,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,0,0,9,9,9,9,9,9,9,9,9,10,9,10,9,9,9,10,9,9,9,9,10,10,10,10,9,10,9,9,10,9,9,9,9,9,10,9,9,9,9,9,10,9,9,9,9,10,9,10,9,9,10,9,10,9,10,9,10,10,10,9,9,9,9,9,10,9,9,10,9,10,9,10,9,9,10,10,0,0,0,0,0,0,11,0,0,0,12,12,13,14,15,14,14,14,11,14,11,13,14,15,16,17,13,14,15,13,14,15,16,13,14,15,16,12,13,14,15,16,12,12,12,12,12,17,17,11,11,14,14,13,14,13,14,12,17,13,14,13,14,15,16,12,13,14,15,16,12,13,15,16,12,13,14,12,13,14,15,16,12,13,11,11,17,12,12,12,12,12,12,12,11,11,17,11,17,12,13,14,15,16,12,13,14,15,16,12,11,17,13,14,15,16,12,13,14,17,13,14,18,18,18,19,19,19,0,0,0,19,19,19,0,19,19,19,19,20,21,20,18,19,21,20,18,19,18,19,18,19,18,19,21,18,19,21,20,18,19,21,20,18,18,18,18,18,18,18,18,18,19,21,20,21,18,19,21,20,18,19,21,20,21,21,21,18,18,18,19,21,20,20,18,19,21,20,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,21,20,18,19,21,20,18,19,18,18,18,0,0,22,22,0,0,23,22,22,22,22,22,22,22,22,23,22,23,22,22,22,23,22,22,22,23,22,23,22,23,22,22,23,22,22,22,22,22,23,22,22,22,22,22,23,22,22,22,22,23,22,23,22,23,22,23,22,23,22,23,22,23,23,23,23,22,22,22,22,22,23,22,22,23,22,23,22,23,22,22,23,23],"f":[null,null,null,null,null,[[],["result",6]],null,null,null,null,null,[[],["result",6]],null,null,null,null,null,null,null,null,null,[[],["result",6,[["contextguard",3]]]],[[]],[[]],[[]],[[["contextflags",3]]],[[]],[[],["c_uint",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["device",3]],["result",6,[["bool",15]]]],[[],["contexthandle",3]],[[],["contextflags",3]],[[]],[[]],[[["contexthandle",3]],["ordering",4]],[[["contextflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[["device",3],["contextflags",3]],["result",6,[["contexthandle",3]]]],[[],["result",6,[["option",4,[["contexthandle",3]]]]]],[[["contexthandle",3]],["result",6]],[[],["result",6,[["device",3]]]],[[]],[[],["result",6]],[[]],[[]],[[],["result",6]],[[["contexthandle",3]],["bool",15]],[[["contextflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["c_uint",6]],["option",4]],[[["c_uint",6]]],[[["c_uint",6]]],[[["intoiterator",8]]],[[["cucontext",6]],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",6]],[[["contexthandle",3]],["bool",15]],[[["contextflags",3]],["bool",15]],[[]],[[["contexthandle",3]],["option",4,[["ordering",4]]]],[[["contextflags",3]],["option",4,[["ordering",4]]]],[[],["result",6,[["option",4,[["contexthandle",3]]]]]],[[],["result",6]],[[],["cucontext",6]],[[["device",3]],["result",6]],[[]],[[["device",3]],["result",6,[["contexthandle",3]]]],[[["bool",15]]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["result",6]],null,null,null,null,[[]],[[]],[[],["result",6]],[[["stream",3]],["result",6]],[[["deviceptr",3],["deviceptr",3],["usize",15]],["result",6]],[[["stream",3],["deviceptr",3],["deviceptr",3],["usize",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6,[["vec",3]]]],[[["deviceattribute",4]],["result",6,[["i32",15]]]],[[]],[[]],[[]],[[]],[[["device",3]],["result",6,[["bool",15]]]],[[],["device",3]],[[],["deviceattribute",4]],[[]],[[]],[[["device",3]],["ordering",4]],[[["deviceattribute",4]],["ordering",4]],[[],["result",6]],[[],["result",6,[["usize",15]]]],[[],["result",6]],[[["device",3]],["bool",15]],[[["deviceattribute",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["cudevice",6]]],[[]],[[]],[[]],[[],["result",6,[["dim3",3]]]],[[],["result",6,[["dim3",3]]]],[[],["result",6,[["u32",15]]]],[[],["result",6,[["string",3]]]],[[["device",3]],["bool",15]],[[["usize",15]],["result",6]],[[],["usize",15]],[[["device",3]],["option",4,[["ordering",4]]]],[[["deviceattribute",4]],["option",4,[["ordering",4]]]],[[],["cudevice",6]],[[]],[[]],[[],["result",6,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["error",3]],[[]],[[["error",3]],["ordering",4]],[[],["result",6]],[[["curesult",4]],["result",6]],[[]],[[],["result",6,[["str",15]]]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["curesult",4]]],[[]],[[]],[[],["result",6,[["str",15]]]],[[["error",3]],["bool",15]],[[["curesult",4]],["result",6]],[[["error",3]],["option",4,[["ordering",4]]]],[[],["curesult",4]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[["eventflags",3]]],[[]],[[],["c_uint",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventflags",3]],[[]],[[["event",3]],["ordering",4]],[[["eventflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[]],[[["event",3],["event",3]],["result",6,[["option",4,[["duration",3]]]]]],[[["event",3],["event",3]],["result",6,[["f32",15]]]],[[["event",3]],["result",6,[["option",4,[["duration",3]]]]]],[[]],[[["event",3]],["bool",15]],[[["eventflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["c_uint",6]],["option",4]],[[["c_uint",6]]],[[["c_uint",6]]],[[["intoiterator",8]]],[[["cuevent",6]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["cuevent",6]],[[],["bool",15]],[[],["bool",15]],[[["event",3]],["bool",15]],[[["eventflags",3]],["bool",15]],[[],["result",6]],[[]],[[["event",3]],["option",4,[["ordering",4]]]],[[["eventflags",3]],["option",4,[["ordering",4]]]],[[],["result",6,[["bool",15]]]],[[],["cuevent",6]],[[["stream",3]],["result",6]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["eventflags",3]],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["deviceptr",3]],[[]],[[],["deviceslice",3]],[[],["deviceslice",3]],[[],["deviceslice",3]],[[],["deviceslice",3]],[[],["deviceslice",3]],[[],["deviceslicemut",3]],[[],["deviceslicemut",3]],[[],["deviceslicemut",3]],[[],["deviceslicemut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["deviceptr",3]],[[]],[[]],[[["deviceptr",3]],["ordering",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6,[["vec",3]]]],[[]],[[]],[[]],[[]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["deviceptr",3]],["bool",15]],[[],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["deviceptr",3],["usize",15]]],[[["deviceptr",3],["usize",15]],["deviceslicemut",3]],[[["deviceptr",3],["usize",15]],["deviceslice",3]],[[["cudeviceptr",6]]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["u8",15]],["result",6]],[[["deviceptr",3]],["bool",15]],[[["cudeviceptr",6]]],[[["isize",15]]],[[["isize",15]]],[[],["usize",15]],[[["deviceptr",3]],["option",4,[["ordering",4]]]],[[],["cudeviceptr",6]],[[],["usize",15]],[[],["deviceslice",3]],[[],["deviceslicemut",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["deviceslice",3]]]],[[],["option",4,[["deviceslicemut",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["functionattribute",4]],["result",6,[["i32",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dim3",3]],[[],["functionattribute",4]],[[]],[[]],[[["dim3",3]],["ordering",4]],[[["functionattribute",4]],["ordering",4]],[[]],[[["dim3",3]],["bool",15]],[[["functionattribute",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cumodule",6]]],[[["cufunction",6]]],[[["cstr",3]],["result",6,[["function",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cumodule",6]],[[["stream",3],["u32",15]],["result",6]],[[],["result",6]],[[["cstr",3]],["result",6]],[[],["result",6]],[[["dim3",3]],["bool",15]],[[["u32",15],["u32",15],["u32",15]]],[[["dim3",3]],["option",4,[["ordering",4]]]],[[["functionattribute",4]],["option",4,[["ordering",4]]]],[[],["cumodule",6]],[[],["cufunction",6]],[[["functionattribute",4],["i32",15]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["i32",15]],["result",6]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["usize",15]],["result",6]],[[["i64",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["isize",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["u64",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["result",6]],[[],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],[[["streamflags",3]]],[[]],[[],["c_uint",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamflags",3]],[[]],[[["stream",3]],["ordering",4]],[[["streamflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["result",6]],[[]],[[]],[[]],[[["stream",3]],["bool",15]],[[["streamflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["c_uint",6]],["option",4]],[[["c_uint",6]]],[[["c_uint",6]]],[[["intoiterator",8]]],[[["custream",6]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["custream",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["stream",3]],["bool",15]],[[["streamflags",3]],["bool",15]],[[],["result",6]],[[]],[[["stream",3]],["option",4,[["ordering",4]]]],[[["streamflags",3]],["option",4,[["ordering",4]]]],[[],["result",6,[["i32",15]]]],[[],["result",6]],[[],["result",6,[["bool",15]]]],[[],["custream",6]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["event",3]],["result",6]],[[["option",4,[["i32",15]]],["streamflags",3]],["result",6]]],"p":[[3,"ContextFlags"],[3,"ContextHandle"],[3,"ContextGuard"],[8,"CopySource"],[8,"CopyDestination"],[4,"DeviceAttribute"],[3,"Device"],[3,"Error"],[3,"EventFlags"],[3,"Event"],[8,"Contiguous"],[3,"DevicePtr"],[3,"DeviceMem"],[3,"PinnedMem"],[3,"DeviceSliceMut"],[3,"DeviceSlice"],[8,"ContiguousMut"],[3,"Dim3"],[4,"FunctionAttribute"],[3,"Function"],[3,"Module"],[3,"StreamFlags"],[3,"Stream"]]},\
"lightning_memops":{"doc":"","t":[13,13,3,13,13,8,13,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["And","Max","MemOpsKernelsCache","Min","Or","Policy","Product","RayonPolicy","Reduction","ReductionFunction","SequentialPolicy","Sum","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cuda_copy","cuda_fill","cuda_fold","cuda_reduce","data_type","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","function","get_hash","get_hash","hash","hash","host_copy","host_fill","host_fold","host_reduce","identity","init","init","init","init","init","into","into","into","into","into","join","join","join","ne","new","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","type_name","vzip","vzip","vzip","vzip","vzip"],"q":["lightning_memops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,1,0,1,0,0,0,0,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,3,4,1,5,3,4,1,5,0,0,0,0,5,2,2,3,4,1,5,2,3,4,1,5,1,5,2,3,4,1,5,1,5,1,5,2,3,4,1,5,2,3,4,1,5,5,1,5,1,5,0,0,0,0,5,2,3,4,1,5,2,3,4,1,5,6,3,4,5,5,1,5,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rayonpolicy",3]],[[],["sequentialpolicy",3]],[[],["reductionfunction",4]],[[],["reduction",3]],[[]],[[]],[[]],[[]],[[["cudacontexthandle",3],["cudastream",3],["memopskernelscache",3],["cudaaccessor",6],["cudamutaccessor",6]],["result",6]],[[["cudacontexthandle",3],["cudastream",3],["memopskernelscache",3],["cudamutaccessor",6],["datavalue",3]],["result",6]],[[["cudacontexthandle",3],["cudastream",3],["memopskernelscache",3],["cudaaccessor",6],["cudamutaccessor",6],["reduction",3]],["result",6]],[[["cudacontexthandle",3],["cudastream",3],["memopskernelscache",3],["cudaaccessor4",6],["cudamutaccessor3",6],["usize",15],["reduction",3]],["result",6]],[[],["datatype",3]],[[],["memopskernelscache",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["reductionfunction",4]],["bool",15]],[[["reduction",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["reductionfunction",4]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[["hostaccessor",6],["hostmutaccessor",6]]],[[["hostmutaccessor",6],["datavalue",3]]],[[["hostaccessor",6],["hostmutaccessor",6],["reduction",3]],["result",6]],[[["hostaccessor",6],["hostmutaccessor",6],["usize",15],["reduction",3]],["result",6]],[[],["datavalue",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["reduction",3]],["bool",15]],[[["reductionfunction",4],["datatype",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"ReductionFunction"],[3,"MemOpsKernelsCache"],[3,"RayonPolicy"],[3,"SequentialPolicy"],[3,"Reduction"],[8,"Policy"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};
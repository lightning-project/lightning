initSidebarItems({"derive":[["Error",""]],"fn":[["all","Test whether the predicate holds for all elements in the iterable."],["any","Test whether the predicate holds for any elements in the iterable."],["default",""],["enumerate","Iterate `iterable` with a running index."],["forget","Takes ownership and “forgets” about the value without running its destructor."],["max","Compares and returns the maximum of two values."],["min","Compares and returns the minimum of two values."],["new_boxed_slice",""],["replace","Moves `src` into the referenced `dest`, returning the previous `dest` value."],["reversed","Iterate `iterable` in reverse."],["swap","Swaps the values at two mutable locations, without deinitializing either one."],["take","Replaces `dest` with the default value of `T`, returning the previous `dest` value."],["zip","Iterate `i` and `j` in lock step."]],"macro":[["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["bail",""],["debug","Logs a message at the debug level."],["error","Logs a message at the error level."],["info","Logs a message at the info level."],["trace","Logs a message at the trace level."],["warn","Logs a message at the warn level."]],"struct":[["Error","The `Error` type, a wrapper around a dynamic error type."]],"trait":[["StdError","`Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`]."],["TryFrom","Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`]."],["TryInto","An attempted conversion that consumes `self`, which may or may not be expensive."],["_","An `Iterator` blanket implementation that provides extra adaptors and methods."],["_","Conversion from an [`Iterator`]."],["_","Provides the `context` method for `Result`."]],"type":[["HashMap",""],["HashSet",""],["IndexMap",""],["IndexSet",""],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["Result",""]]});